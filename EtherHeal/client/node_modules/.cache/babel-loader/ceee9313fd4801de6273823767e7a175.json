{"ast":null,"code":"'use strict';\n\nvar BigInteger = require('jsbn').BigInteger;\n\nvar common = require('./common.js');\n\nvar sprintf = require('sprintf-js').sprintf;\n\nvar _ = require('lodash');\n\nvar constants = require('./v4/constants.js');\n/**\n * Represents an IPv4 address\n * @class Address4\n * @param {string} address - An IPv4 address string\n */\n\n\nfunction Address4(address) {\n  this.valid = false;\n  this.address = address;\n  this.groups = constants.GROUPS;\n  this.v4 = true;\n  this.subnet = '/32';\n  this.subnetMask = 32;\n  var subnet = constants.RE_SUBNET_STRING.exec(address);\n\n  if (subnet) {\n    this.parsedSubnet = subnet[0].replace('/', '');\n    this.subnetMask = parseInt(this.parsedSubnet, 10);\n    this.subnet = '/' + this.subnetMask;\n\n    if (this.subnetMask < 0 || this.subnetMask > constants.BITS) {\n      this.valid = false;\n      this.error = 'Invalid subnet mask.';\n      return;\n    }\n\n    address = address.replace(constants.RE_SUBNET_STRING, '');\n  }\n\n  this.addressMinusSuffix = address;\n  this.parsedAddress = this.parse(address);\n}\n/*\n * Parses a v4 address\n */\n\n\nAddress4.prototype.parse = function (address) {\n  var groups = address.split('.');\n\n  if (address.match(constants.RE_ADDRESS)) {\n    this.valid = true;\n  } else {\n    this.error = 'Invalid IPv4 address.';\n  }\n\n  return groups;\n};\n/**\n * Return true if the address is valid\n * @memberof Address4\n * @instance\n * @returns {Boolean}\n */\n\n\nAddress4.prototype.isValid = function () {\n  return this.valid;\n};\n/**\n * Returns the correct form of an address\n * @memberof Address4\n * @instance\n * @returns {String}\n */\n\n\nAddress4.prototype.correctForm = function () {\n  return this.parsedAddress.map(function (part) {\n    return parseInt(part, 10);\n  }).join('.');\n};\n/**\n * Returns true if the address is correct, false otherwise\n * @memberof Address4\n * @instance\n * @returns {Boolean}\n */\n\n\nAddress4.prototype.isCorrect = common.isCorrect(constants.BITS);\n/**\n * Converts a hex string to an IPv4 address object\n * @memberof Address4\n * @static\n * @param {string} hex - a hex string to convert\n * @returns {Address4}\n */\n\nAddress4.fromHex = function (hex) {\n  var padded = _.padStart(hex.replace(/:/g, ''), 8, '0');\n\n  var groups = [];\n  var i;\n\n  for (i = 0; i < 8; i += 2) {\n    var h = padded.slice(i, i + 2);\n    groups.push(parseInt(h, 16));\n  }\n\n  return new Address4(groups.join('.'));\n};\n/**\n * Converts an integer into a IPv4 address object\n * @memberof Address4\n * @static\n * @param {integer} integer - a number to convert\n * @returns {Address4}\n */\n\n\nAddress4.fromInteger = function (integer) {\n  return Address4.fromHex(integer.toString(16));\n};\n/**\n * Converts an IPv4 address object to a hex string\n * @memberof Address4\n * @instance\n * @returns {String}\n */\n\n\nAddress4.prototype.toHex = function () {\n  return this.parsedAddress.map(function (part) {\n    return sprintf('%02x', parseInt(part, 10));\n  }).join(':');\n};\n/**\n * Converts an IPv4 address object to an array of bytes\n * @memberof Address4\n * @instance\n * @returns {Array}\n */\n\n\nAddress4.prototype.toArray = function () {\n  return this.parsedAddress.map(function (part) {\n    return parseInt(part, 10);\n  });\n};\n/**\n * Converts an IPv4 address object to an IPv6 address group\n * @memberof Address4\n * @instance\n * @returns {String}\n */\n\n\nAddress4.prototype.toGroup6 = function () {\n  var output = [];\n  var i;\n\n  for (i = 0; i < constants.GROUPS; i += 2) {\n    var hex = sprintf('%02x%02x', parseInt(this.parsedAddress[i], 10), parseInt(this.parsedAddress[i + 1], 10));\n    output.push(sprintf('%x', parseInt(hex, 16)));\n  }\n\n  return output.join(':');\n};\n/**\n * Returns the address as a BigInteger\n * @memberof Address4\n * @instance\n * @returns {BigInteger}\n */\n\n\nAddress4.prototype.bigInteger = function () {\n  if (!this.valid) {\n    return null;\n  }\n\n  return new BigInteger(this.parsedAddress.map(function (n) {\n    return sprintf('%02x', parseInt(n, 10));\n  }).join(''), 16);\n};\n/**\n * Helper function getting start address.\n * @memberof Address4\n * @instance\n * @returns {BigInteger}\n */\n\n\nAddress4.prototype._startAddress = function () {\n  return new BigInteger(this.mask() + _.repeat('0', constants.BITS - this.subnetMask), 2);\n};\n/**\n * The first address in the range given by this address' subnet.\n * Often referred to as the Network Address.\n * @memberof Address4\n * @instance\n * @returns {Address4}\n */\n\n\nAddress4.prototype.startAddress = function () {\n  return Address4.fromBigInteger(this._startAddress());\n};\n/**\n * The first host address in the range given by this address's subnet ie\n * the first address after the Network Address\n * @memberof Address4\n * @instance\n * @returns {Address4}\n */\n\n\nAddress4.prototype.startAddressExclusive = function () {\n  var adjust = new BigInteger('1');\n  return Address4.fromBigInteger(this._startAddress().add(adjust));\n};\n/**\n * Helper function getting end address.\n * @memberof Address4\n * @instance\n * @returns {BigInteger}\n */\n\n\nAddress4.prototype._endAddress = function () {\n  return new BigInteger(this.mask() + _.repeat('1', constants.BITS - this.subnetMask), 2);\n};\n/**\n * The last address in the range given by this address' subnet\n * Often referred to as the Broadcast\n * @memberof Address4\n * @instance\n * @returns {Address4}\n */\n\n\nAddress4.prototype.endAddress = function () {\n  return Address4.fromBigInteger(this._endAddress());\n};\n/**\n * The last host address in the range given by this address's subnet ie\n * the last address prior to the Broadcast Address\n * @memberof Address4\n * @instance\n * @returns {Address4}\n */\n\n\nAddress4.prototype.endAddressExclusive = function () {\n  var adjust = new BigInteger('1');\n  return Address4.fromBigInteger(this._endAddress().subtract(adjust));\n};\n/**\n * Converts a BigInteger to a v4 address object\n * @memberof Address4\n * @static\n * @param {BigInteger} bigInteger - a BigInteger to convert\n * @returns {Address4}\n */\n\n\nAddress4.fromBigInteger = function (bigInteger) {\n  return Address4.fromInteger(parseInt(bigInteger.toString(), 10));\n};\n/**\n * Returns the first n bits of the address, defaulting to the\n * subnet mask\n * @memberof Address4\n * @instance\n * @returns {String}\n */\n\n\nAddress4.prototype.mask = function (optionalMask) {\n  if (optionalMask === undefined) {\n    optionalMask = this.subnetMask;\n  }\n\n  return this.getBitsBase2(0, optionalMask);\n};\n/**\n * Returns the bits in the given range as a base-2 string\n * @memberof Address4\n * @instance\n * @returns {string}\n */\n\n\nAddress4.prototype.getBitsBase2 = function (start, end) {\n  return this.binaryZeroPad().slice(start, end);\n};\n/**\n * Returns true if the given address is in the subnet of the current address\n * @memberof Address4\n * @instance\n * @returns {boolean}\n */\n\n\nAddress4.prototype.isInSubnet = common.isInSubnet;\n/**\n * Returns a zero-padded base-2 string representation of the address\n * @memberof Address4\n * @instance\n * @returns {string}\n */\n\nAddress4.prototype.binaryZeroPad = function () {\n  return _.padStart(this.bigInteger().toString(2), constants.BITS, '0');\n};\n\nmodule.exports = Address4;","map":{"version":3,"sources":["Z:/Projects/Rakuten Hack/EtherealHeal/Complete Project/client/node_modules/ip-address/lib/ipv4.js"],"names":["BigInteger","require","common","sprintf","_","constants","Address4","address","valid","groups","GROUPS","v4","subnet","subnetMask","RE_SUBNET_STRING","exec","parsedSubnet","replace","parseInt","BITS","error","addressMinusSuffix","parsedAddress","parse","prototype","split","match","RE_ADDRESS","isValid","correctForm","map","part","join","isCorrect","fromHex","hex","padded","padStart","i","h","slice","push","fromInteger","integer","toString","toHex","toArray","toGroup6","output","bigInteger","n","_startAddress","mask","repeat","startAddress","fromBigInteger","startAddressExclusive","adjust","add","_endAddress","endAddress","endAddressExclusive","subtract","optionalMask","undefined","getBitsBase2","start","end","binaryZeroPad","isInSubnet","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar BigInteger = require('jsbn').BigInteger;\nvar common = require('./common.js');\nvar sprintf = require('sprintf-js').sprintf;\nvar _ = require('lodash');\n\nvar constants = require('./v4/constants.js');\n\n/**\n * Represents an IPv4 address\n * @class Address4\n * @param {string} address - An IPv4 address string\n */\nfunction Address4(address) {\n  this.valid = false;\n  this.address = address;\n  this.groups = constants.GROUPS;\n\n  this.v4 = true;\n\n  this.subnet = '/32';\n  this.subnetMask = 32;\n\n  var subnet = constants.RE_SUBNET_STRING.exec(address);\n\n  if (subnet) {\n    this.parsedSubnet = subnet[0].replace('/', '');\n    this.subnetMask = parseInt(this.parsedSubnet, 10);\n    this.subnet = '/' + this.subnetMask;\n\n    if (this.subnetMask < 0 || this.subnetMask > constants.BITS) {\n      this.valid = false;\n      this.error = 'Invalid subnet mask.';\n\n      return;\n    }\n\n    address = address.replace(constants.RE_SUBNET_STRING, '');\n  }\n\n  this.addressMinusSuffix = address;\n\n  this.parsedAddress = this.parse(address);\n}\n\n/*\n * Parses a v4 address\n */\nAddress4.prototype.parse = function (address) {\n  var groups = address.split('.');\n\n  if (address.match(constants.RE_ADDRESS)) {\n    this.valid = true;\n  } else {\n    this.error = 'Invalid IPv4 address.';\n  }\n\n  return groups;\n};\n\n/**\n * Return true if the address is valid\n * @memberof Address4\n * @instance\n * @returns {Boolean}\n */\nAddress4.prototype.isValid = function () {\n  return this.valid;\n};\n\n/**\n * Returns the correct form of an address\n * @memberof Address4\n * @instance\n * @returns {String}\n */\nAddress4.prototype.correctForm = function () {\n  return this.parsedAddress.map(function (part) {\n    return parseInt(part, 10);\n  }).join('.');\n};\n\n/**\n * Returns true if the address is correct, false otherwise\n * @memberof Address4\n * @instance\n * @returns {Boolean}\n */\nAddress4.prototype.isCorrect = common.isCorrect(constants.BITS);\n\n/**\n * Converts a hex string to an IPv4 address object\n * @memberof Address4\n * @static\n * @param {string} hex - a hex string to convert\n * @returns {Address4}\n */\nAddress4.fromHex = function (hex) {\n  var padded = _.padStart(hex.replace(/:/g, ''), 8, '0');\n  var groups = [];\n  var i;\n\n  for (i = 0; i < 8; i += 2) {\n    var h = padded.slice(i, i + 2);\n\n    groups.push(parseInt(h, 16));\n  }\n\n  return new Address4(groups.join('.'));\n};\n\n/**\n * Converts an integer into a IPv4 address object\n * @memberof Address4\n * @static\n * @param {integer} integer - a number to convert\n * @returns {Address4}\n */\nAddress4.fromInteger = function (integer) {\n  return Address4.fromHex(integer.toString(16));\n};\n\n/**\n * Converts an IPv4 address object to a hex string\n * @memberof Address4\n * @instance\n * @returns {String}\n */\nAddress4.prototype.toHex = function () {\n  return this.parsedAddress.map(function (part) {\n    return sprintf('%02x', parseInt(part, 10));\n  }).join(':');\n};\n\n/**\n * Converts an IPv4 address object to an array of bytes\n * @memberof Address4\n * @instance\n * @returns {Array}\n */\nAddress4.prototype.toArray = function () {\n  return this.parsedAddress.map(function (part) {\n    return parseInt(part, 10);\n  });\n};\n\n/**\n * Converts an IPv4 address object to an IPv6 address group\n * @memberof Address4\n * @instance\n * @returns {String}\n */\nAddress4.prototype.toGroup6 = function () {\n  var output = [];\n  var i;\n\n  for (i = 0; i < constants.GROUPS; i += 2) {\n    var hex = sprintf('%02x%02x',\n      parseInt(this.parsedAddress[i], 10),\n      parseInt(this.parsedAddress[i + 1], 10));\n\n    output.push(sprintf('%x', parseInt(hex, 16)));\n  }\n\n  return output.join(':');\n};\n\n/**\n * Returns the address as a BigInteger\n * @memberof Address4\n * @instance\n * @returns {BigInteger}\n */\nAddress4.prototype.bigInteger = function () {\n  if (!this.valid) {\n    return null;\n  }\n\n  return new BigInteger(this.parsedAddress.map(function (n) {\n    return sprintf('%02x', parseInt(n, 10));\n  }).join(''), 16);\n};\n\n/**\n * Helper function getting start address.\n * @memberof Address4\n * @instance\n * @returns {BigInteger}\n */\nAddress4.prototype._startAddress = function () {\n  return new BigInteger(\n    this.mask() + _.repeat('0', constants.BITS - this.subnetMask), 2\n  );\n};\n\n/**\n * The first address in the range given by this address' subnet.\n * Often referred to as the Network Address.\n * @memberof Address4\n * @instance\n * @returns {Address4}\n */\nAddress4.prototype.startAddress = function () {\n  return Address4.fromBigInteger(this._startAddress());\n};\n\n/**\n * The first host address in the range given by this address's subnet ie\n * the first address after the Network Address\n * @memberof Address4\n * @instance\n * @returns {Address4}\n */\nAddress4.prototype.startAddressExclusive = function () {\n  var adjust = new BigInteger('1');\n  return Address4.fromBigInteger(this._startAddress().add(adjust));\n};\n\n/**\n * Helper function getting end address.\n * @memberof Address4\n * @instance\n * @returns {BigInteger}\n */\nAddress4.prototype._endAddress = function () {\n  return new BigInteger(\n    this.mask() + _.repeat('1', constants.BITS - this.subnetMask), 2\n  );\n};\n\n/**\n * The last address in the range given by this address' subnet\n * Often referred to as the Broadcast\n * @memberof Address4\n * @instance\n * @returns {Address4}\n */\nAddress4.prototype.endAddress = function () {\n  return Address4.fromBigInteger(this._endAddress());\n};\n\n/**\n * The last host address in the range given by this address's subnet ie\n * the last address prior to the Broadcast Address\n * @memberof Address4\n * @instance\n * @returns {Address4}\n */\nAddress4.prototype.endAddressExclusive = function () {\n  var adjust = new BigInteger('1');\n  return Address4.fromBigInteger(this._endAddress().subtract(adjust));\n};\n\n/**\n * Converts a BigInteger to a v4 address object\n * @memberof Address4\n * @static\n * @param {BigInteger} bigInteger - a BigInteger to convert\n * @returns {Address4}\n */\nAddress4.fromBigInteger = function (bigInteger) {\n  return Address4.fromInteger(parseInt(bigInteger.toString(), 10));\n};\n\n/**\n * Returns the first n bits of the address, defaulting to the\n * subnet mask\n * @memberof Address4\n * @instance\n * @returns {String}\n */\nAddress4.prototype.mask = function (optionalMask) {\n  if (optionalMask === undefined) {\n    optionalMask = this.subnetMask;\n  }\n\n  return this.getBitsBase2(0, optionalMask);\n};\n\n/**\n * Returns the bits in the given range as a base-2 string\n * @memberof Address4\n * @instance\n * @returns {string}\n */\nAddress4.prototype.getBitsBase2 = function (start, end) {\n  return this.binaryZeroPad().slice(start, end);\n};\n\n/**\n * Returns true if the given address is in the subnet of the current address\n * @memberof Address4\n * @instance\n * @returns {boolean}\n */\nAddress4.prototype.isInSubnet = common.isInSubnet;\n\n/**\n * Returns a zero-padded base-2 string representation of the address\n * @memberof Address4\n * @instance\n * @returns {string}\n */\nAddress4.prototype.binaryZeroPad = function () {\n  return _.padStart(this.bigInteger().toString(2), constants.BITS, '0');\n};\n\nmodule.exports = Address4;\n"]},"metadata":{},"sourceType":"script"}