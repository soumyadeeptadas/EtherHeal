{"ast":null,"code":"'use strict';\n\nconst promisify = require('promisify-es6');\n\nconst pump = require('pump');\n\nconst Writable = require('readable-stream').Writable;\n\nconst moduleConfig = require('./utils/module-config');\n\nconst PingMessageStream = require('./utils/ping-message-stream');\n\nmodule.exports = arg => {\n  const send = moduleConfig(arg);\n  return promisify((id, opts, callback) => {\n    if (typeof opts === 'function') {\n      callback = opts;\n      opts = {};\n    }\n\n    if (opts.n && opts.count) {\n      return callback(new Error('Use either n or count, not both'));\n    } // Default number of packtes to 1\n\n\n    if (!opts.n && !opts.count) {\n      opts.n = 1;\n    }\n\n    const request = {\n      path: 'ping',\n      args: id,\n      qs: opts\n    }; // Transform the response stream to a value:\n    // [{ success: <boolean>, time: <number>, text: <string> }]\n\n    const transform = (stream, callback) => {\n      const messageConverter = new PingMessageStream();\n      const responses = [];\n      pump(stream, messageConverter, new Writable({\n        objectMode: true,\n\n        write(chunk, enc, cb) {\n          responses.push(chunk);\n          cb();\n        }\n\n      }), err => {\n        if (err) {\n          return callback(err);\n        }\n\n        callback(null, responses);\n      });\n    };\n\n    send.andTransform(request, transform, callback);\n  });\n};","map":{"version":3,"sources":["z:/Projects/EtherealOrgan-copy/Complete Project/client/node_modules/ipfs-api/src/ping.js"],"names":["promisify","require","pump","Writable","moduleConfig","PingMessageStream","module","exports","arg","send","id","opts","callback","n","count","Error","request","path","args","qs","transform","stream","messageConverter","responses","objectMode","write","chunk","enc","cb","push","err","andTransform"],"mappings":"AAAA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,eAAD,CAAzB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AACA,MAAME,QAAQ,GAAGF,OAAO,CAAC,iBAAD,CAAP,CAA2BE,QAA5C;;AACA,MAAMC,YAAY,GAAGH,OAAO,CAAC,uBAAD,CAA5B;;AACA,MAAMI,iBAAiB,GAAGJ,OAAO,CAAC,6BAAD,CAAjC;;AAEAK,MAAM,CAACC,OAAP,GAAkBC,GAAD,IAAS;AACxB,QAAMC,IAAI,GAAGL,YAAY,CAACI,GAAD,CAAzB;AAEA,SAAOR,SAAS,CAAC,CAACU,EAAD,EAAKC,IAAL,EAAWC,QAAX,KAAwB;AACvC,QAAI,OAAOD,IAAP,KAAgB,UAApB,EAAgC;AAC9BC,MAAAA,QAAQ,GAAGD,IAAX;AACAA,MAAAA,IAAI,GAAG,EAAP;AACD;;AAED,QAAIA,IAAI,CAACE,CAAL,IAAUF,IAAI,CAACG,KAAnB,EAA0B;AACxB,aAAOF,QAAQ,CAAC,IAAIG,KAAJ,CAAU,iCAAV,CAAD,CAAf;AACD,KARsC,CAUvC;;;AACA,QAAI,CAACJ,IAAI,CAACE,CAAN,IAAW,CAACF,IAAI,CAACG,KAArB,EAA4B;AAC1BH,MAAAA,IAAI,CAACE,CAAL,GAAS,CAAT;AACD;;AAED,UAAMG,OAAO,GAAG;AACdC,MAAAA,IAAI,EAAE,MADQ;AAEdC,MAAAA,IAAI,EAAER,EAFQ;AAGdS,MAAAA,EAAE,EAAER;AAHU,KAAhB,CAfuC,CAqBvC;AACA;;AACA,UAAMS,SAAS,GAAG,CAACC,MAAD,EAAST,QAAT,KAAsB;AACtC,YAAMU,gBAAgB,GAAG,IAAIjB,iBAAJ,EAAzB;AACA,YAAMkB,SAAS,GAAG,EAAlB;AAEArB,MAAAA,IAAI,CACFmB,MADE,EAEFC,gBAFE,EAGF,IAAInB,QAAJ,CAAa;AACXqB,QAAAA,UAAU,EAAE,IADD;;AAEXC,QAAAA,KAAK,CAAEC,KAAF,EAASC,GAAT,EAAcC,EAAd,EAAkB;AACrBL,UAAAA,SAAS,CAACM,IAAV,CAAeH,KAAf;AACAE,UAAAA,EAAE;AACH;;AALU,OAAb,CAHE,EAUDE,GAAD,IAAS;AACP,YAAIA,GAAJ,EAAS;AACP,iBAAOlB,QAAQ,CAACkB,GAAD,CAAf;AACD;;AACDlB,QAAAA,QAAQ,CAAC,IAAD,EAAOW,SAAP,CAAR;AACD,OAfC,CAAJ;AAiBD,KArBD;;AAuBAd,IAAAA,IAAI,CAACsB,YAAL,CAAkBf,OAAlB,EAA2BI,SAA3B,EAAsCR,QAAtC;AACD,GA/Ce,CAAhB;AAgDD,CAnDD","sourcesContent":["'use strict'\n\nconst promisify = require('promisify-es6')\nconst pump = require('pump')\nconst Writable = require('readable-stream').Writable\nconst moduleConfig = require('./utils/module-config')\nconst PingMessageStream = require('./utils/ping-message-stream')\n\nmodule.exports = (arg) => {\n  const send = moduleConfig(arg)\n\n  return promisify((id, opts, callback) => {\n    if (typeof opts === 'function') {\n      callback = opts\n      opts = {}\n    }\n\n    if (opts.n && opts.count) {\n      return callback(new Error('Use either n or count, not both'))\n    }\n\n    // Default number of packtes to 1\n    if (!opts.n && !opts.count) {\n      opts.n = 1\n    }\n\n    const request = {\n      path: 'ping',\n      args: id,\n      qs: opts\n    }\n\n    // Transform the response stream to a value:\n    // [{ success: <boolean>, time: <number>, text: <string> }]\n    const transform = (stream, callback) => {\n      const messageConverter = new PingMessageStream()\n      const responses = []\n\n      pump(\n        stream,\n        messageConverter,\n        new Writable({\n          objectMode: true,\n          write (chunk, enc, cb) {\n            responses.push(chunk)\n            cb()\n          }\n        }),\n        (err) => {\n          if (err) {\n            return callback(err)\n          }\n          callback(null, responses)\n        }\n      )\n    }\n\n    send.andTransform(request, transform, callback)\n  })\n}\n"]},"metadata":{},"sourceType":"script"}