{"ast":null,"code":"'use strict';\n\nconst {\n  URLWithLegacySupport,\n  format\n} = require('./url');\n\nmodule.exports = (url, location = {}, protocolMap = {}, defaultProtocol) => {\n  let protocol = location.protocol ? location.protocol.replace(':', '') : 'http'; // Check protocol map\n\n  protocol = (protocolMap[protocol] || defaultProtocol || protocol) + ':';\n  let urlParsed;\n\n  try {\n    urlParsed = new URLWithLegacySupport(url);\n  } catch (err) {\n    urlParsed = {};\n  }\n\n  const base = Object.assign({}, location, {\n    protocol: protocol || urlParsed.protocol,\n    host: location.host || urlParsed.host\n  });\n  return new URLWithLegacySupport(url, format(base)).toString();\n};","map":{"version":3,"sources":["Z:/Projects/EtherealOrgan/Complete Project/client/node_modules/iso-url/src/relative.js"],"names":["URLWithLegacySupport","format","require","module","exports","url","location","protocolMap","defaultProtocol","protocol","replace","urlParsed","err","base","Object","assign","host","toString"],"mappings":"AAAA;;AAEA,MAAM;AAAEA,EAAAA,oBAAF;AAAwBC,EAAAA;AAAxB,IAAmCC,OAAO,CAAC,OAAD,CAAhD;;AAEAC,MAAM,CAACC,OAAP,GAAiB,CAACC,GAAD,EAAMC,QAAQ,GAAG,EAAjB,EAAqBC,WAAW,GAAG,EAAnC,EAAuCC,eAAvC,KAA2D;AACxE,MAAIC,QAAQ,GAAGH,QAAQ,CAACG,QAAT,GACXH,QAAQ,CAACG,QAAT,CAAkBC,OAAlB,CAA0B,GAA1B,EAA+B,EAA/B,CADW,GAEX,MAFJ,CADwE,CAKxE;;AACAD,EAAAA,QAAQ,GAAG,CAACF,WAAW,CAACE,QAAD,CAAX,IAAyBD,eAAzB,IAA4CC,QAA7C,IAAyD,GAApE;AACA,MAAIE,SAAJ;;AAEA,MAAI;AACAA,IAAAA,SAAS,GAAG,IAAIX,oBAAJ,CAAyBK,GAAzB,CAAZ;AACH,GAFD,CAEE,OAAOO,GAAP,EAAY;AACVD,IAAAA,SAAS,GAAG,EAAZ;AACH;;AAED,QAAME,IAAI,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBT,QAAlB,EAA4B;AACrCG,IAAAA,QAAQ,EAAEA,QAAQ,IAAIE,SAAS,CAACF,QADK;AAErCO,IAAAA,IAAI,EAAEV,QAAQ,CAACU,IAAT,IAAiBL,SAAS,CAACK;AAFI,GAA5B,CAAb;AAKA,SAAO,IAAIhB,oBAAJ,CAAyBK,GAAzB,EAA8BJ,MAAM,CAACY,IAAD,CAApC,EAA4CI,QAA5C,EAAP;AACH,CArBD","sourcesContent":["'use strict';\n\nconst { URLWithLegacySupport, format } = require('./url');\n\nmodule.exports = (url, location = {}, protocolMap = {}, defaultProtocol) => {\n    let protocol = location.protocol ?\n        location.protocol.replace(':', '') :\n        'http';\n\n    // Check protocol map\n    protocol = (protocolMap[protocol] || defaultProtocol || protocol) + ':';\n    let urlParsed;\n\n    try {\n        urlParsed = new URLWithLegacySupport(url);\n    } catch (err) {\n        urlParsed = {};\n    }\n\n    const base = Object.assign({}, location, {\n        protocol: protocol || urlParsed.protocol,\n        host: location.host || urlParsed.host\n    });\n\n    return new URLWithLegacySupport(url, format(base)).toString();\n};\n"]},"metadata":{},"sourceType":"script"}