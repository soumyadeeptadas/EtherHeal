{"ast":null,"code":"'use strict';\n\nconst dagNodeUtil = require('./util');\n\nconst cloneLinks = dagNodeUtil.cloneLinks;\nconst cloneData = dagNodeUtil.cloneData;\nconst toDAGLink = dagNodeUtil.toDAGLink;\n\nconst DAGLink = require('../dag-link');\n\nconst DAGNode = require('./index');\n\nconst create = require('./create');\n\nfunction addLink(node, link, callback) {\n  const links = cloneLinks(node);\n  const data = cloneData(node);\n\n  if (DAGLink.isDAGLink(link)) {// It's a DAGLink instance\n    // no need to do anything\n  } else if (DAGNode.isDAGNode(link)) {\n    // It's a DAGNode instance\n    // convert to link\n    link = toDAGLink(link);\n  } else {\n    // It's a Object with name, multihash/link and size\n    try {\n      link = new DAGLink(link.name, link.size, link.multihash || link.hash);\n    } catch (err) {\n      return callback(err);\n    }\n  }\n\n  links.push(link);\n  create(data, links, callback);\n}\n\nmodule.exports = addLink;","map":{"version":3,"sources":["Z:/Projects/Rakuten Hack/EtherealHeal/Complete Project/client/node_modules/ipld-dag-pb/src/dag-node/addLink.js"],"names":["dagNodeUtil","require","cloneLinks","cloneData","toDAGLink","DAGLink","DAGNode","create","addLink","node","link","callback","links","data","isDAGLink","isDAGNode","name","size","multihash","hash","err","push","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,WAAW,GAAGC,OAAO,CAAC,QAAD,CAA3B;;AACA,MAAMC,UAAU,GAAGF,WAAW,CAACE,UAA/B;AACA,MAAMC,SAAS,GAAGH,WAAW,CAACG,SAA9B;AACA,MAAMC,SAAS,GAAGJ,WAAW,CAACI,SAA9B;;AACA,MAAMC,OAAO,GAAGJ,OAAO,CAAC,aAAD,CAAvB;;AACA,MAAMK,OAAO,GAAGL,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAMM,MAAM,GAAGN,OAAO,CAAC,UAAD,CAAtB;;AAEA,SAASO,OAAT,CAAkBC,IAAlB,EAAwBC,IAAxB,EAA8BC,QAA9B,EAAwC;AACtC,QAAMC,KAAK,GAAGV,UAAU,CAACO,IAAD,CAAxB;AACA,QAAMI,IAAI,GAAGV,SAAS,CAACM,IAAD,CAAtB;;AAEA,MAAIJ,OAAO,CAACS,SAAR,CAAkBJ,IAAlB,CAAJ,EAA6B,CAC3B;AACA;AACD,GAHD,MAGO,IAAIJ,OAAO,CAACS,SAAR,CAAkBL,IAAlB,CAAJ,EAA6B;AAClC;AACA;AACAA,IAAAA,IAAI,GAAGN,SAAS,CAACM,IAAD,CAAhB;AACD,GAJM,MAIA;AACL;AACA,QAAI;AACFA,MAAAA,IAAI,GAAG,IAAIL,OAAJ,CAAYK,IAAI,CAACM,IAAjB,EAAuBN,IAAI,CAACO,IAA5B,EAAkCP,IAAI,CAACQ,SAAL,IAAkBR,IAAI,CAACS,IAAzD,CAAP;AACD,KAFD,CAEE,OAAOC,GAAP,EAAY;AACZ,aAAOT,QAAQ,CAACS,GAAD,CAAf;AACD;AACF;;AAEDR,EAAAA,KAAK,CAACS,IAAN,CAAWX,IAAX;AACAH,EAAAA,MAAM,CAACM,IAAD,EAAOD,KAAP,EAAcD,QAAd,CAAN;AACD;;AAEDW,MAAM,CAACC,OAAP,GAAiBf,OAAjB","sourcesContent":["'use strict'\n\nconst dagNodeUtil = require('./util')\nconst cloneLinks = dagNodeUtil.cloneLinks\nconst cloneData = dagNodeUtil.cloneData\nconst toDAGLink = dagNodeUtil.toDAGLink\nconst DAGLink = require('../dag-link')\nconst DAGNode = require('./index')\nconst create = require('./create')\n\nfunction addLink (node, link, callback) {\n  const links = cloneLinks(node)\n  const data = cloneData(node)\n\n  if (DAGLink.isDAGLink(link)) {\n    // It's a DAGLink instance\n    // no need to do anything\n  } else if (DAGNode.isDAGNode(link)) {\n    // It's a DAGNode instance\n    // convert to link\n    link = toDAGLink(link)\n  } else {\n    // It's a Object with name, multihash/link and size\n    try {\n      link = new DAGLink(link.name, link.size, link.multihash || link.hash)\n    } catch (err) {\n      return callback(err)\n    }\n  }\n\n  links.push(link)\n  create(data, links, callback)\n}\n\nmodule.exports = addLink\n"]},"metadata":{},"sourceType":"script"}