{"ast":null,"code":"/* Node.js 6.4.0 and up has full support */\nvar hasFullSupport = function () {\n  try {\n    if (!Buffer.isEncoding('latin1')) {\n      return false;\n    }\n\n    var buf = Buffer.alloc ? Buffer.alloc(4) : new Buffer(4);\n    buf.fill('ab', 'ucs2');\n    return buf.toString('hex') === '61006200';\n  } catch (_) {\n    return false;\n  }\n}();\n\nfunction isSingleByte(val) {\n  return val.length === 1 && val.charCodeAt(0) < 256;\n}\n\nfunction fillWithNumber(buffer, val, start, end) {\n  if (start < 0 || end > buffer.length) {\n    throw new RangeError('Out of range index');\n  }\n\n  start = start >>> 0;\n  end = end === undefined ? buffer.length : end >>> 0;\n\n  if (end > start) {\n    buffer.fill(val, start, end);\n  }\n\n  return buffer;\n}\n\nfunction fillWithBuffer(buffer, val, start, end) {\n  if (start < 0 || end > buffer.length) {\n    throw new RangeError('Out of range index');\n  }\n\n  if (end <= start) {\n    return buffer;\n  }\n\n  start = start >>> 0;\n  end = end === undefined ? buffer.length : end >>> 0;\n  var pos = start;\n  var len = val.length;\n\n  while (pos <= end - len) {\n    val.copy(buffer, pos);\n    pos += len;\n  }\n\n  if (pos !== end) {\n    val.copy(buffer, pos, 0, end - pos);\n  }\n\n  return buffer;\n}\n\nfunction fill(buffer, val, start, end, encoding) {\n  if (hasFullSupport) {\n    return buffer.fill(val, start, end, encoding);\n  }\n\n  if (typeof val === 'number') {\n    return fillWithNumber(buffer, val, start, end);\n  }\n\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start;\n      start = 0;\n      end = buffer.length;\n    } else if (typeof end === 'string') {\n      encoding = end;\n      end = buffer.length;\n    }\n\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string');\n    }\n\n    if (encoding === 'latin1') {\n      encoding = 'binary';\n    }\n\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding);\n    }\n\n    if (val === '') {\n      return fillWithNumber(buffer, 0, start, end);\n    }\n\n    if (isSingleByte(val)) {\n      return fillWithNumber(buffer, val.charCodeAt(0), start, end);\n    }\n\n    val = new Buffer(val, encoding);\n  }\n\n  if (Buffer.isBuffer(val)) {\n    return fillWithBuffer(buffer, val, start, end);\n  } // Other values (e.g. undefined, boolean, object) results in zero-fill\n\n\n  return fillWithNumber(buffer, 0, start, end);\n}\n\nmodule.exports = fill;","map":{"version":3,"sources":["Z:/Projects/EtherealOrgan/Complete Project/client/node_modules/buffer-fill/index.js"],"names":["hasFullSupport","Buffer","isEncoding","buf","alloc","fill","toString","_","isSingleByte","val","length","charCodeAt","fillWithNumber","buffer","start","end","RangeError","undefined","fillWithBuffer","pos","len","copy","encoding","TypeError","isBuffer","module","exports"],"mappings":"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","sourcesContent":["/* Node.js 6.4.0 and up has full support */\nvar hasFullSupport = (function () {\n  try {\n    if (!Buffer.isEncoding('latin1')) {\n      return false\n    }\n\n    var buf = Buffer.alloc ? Buffer.alloc(4) : new Buffer(4)\n\n    buf.fill('ab', 'ucs2')\n\n    return (buf.toString('hex') === '61006200')\n  } catch (_) {\n    return false\n  }\n}())\n\nfunction isSingleByte (val) {\n  return (val.length === 1 && val.charCodeAt(0) < 256)\n}\n\nfunction fillWithNumber (buffer, val, start, end) {\n  if (start < 0 || end > buffer.length) {\n    throw new RangeError('Out of range index')\n  }\n\n  start = start >>> 0\n  end = end === undefined ? buffer.length : end >>> 0\n\n  if (end > start) {\n    buffer.fill(val, start, end)\n  }\n\n  return buffer\n}\n\nfunction fillWithBuffer (buffer, val, start, end) {\n  if (start < 0 || end > buffer.length) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return buffer\n  }\n\n  start = start >>> 0\n  end = end === undefined ? buffer.length : end >>> 0\n\n  var pos = start\n  var len = val.length\n  while (pos <= (end - len)) {\n    val.copy(buffer, pos)\n    pos += len\n  }\n\n  if (pos !== end) {\n    val.copy(buffer, pos, 0, end - pos)\n  }\n\n  return buffer\n}\n\nfunction fill (buffer, val, start, end, encoding) {\n  if (hasFullSupport) {\n    return buffer.fill(val, start, end, encoding)\n  }\n\n  if (typeof val === 'number') {\n    return fillWithNumber(buffer, val, start, end)\n  }\n\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = buffer.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = buffer.length\n    }\n\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n\n    if (encoding === 'latin1') {\n      encoding = 'binary'\n    }\n\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n\n    if (val === '') {\n      return fillWithNumber(buffer, 0, start, end)\n    }\n\n    if (isSingleByte(val)) {\n      return fillWithNumber(buffer, val.charCodeAt(0), start, end)\n    }\n\n    val = new Buffer(val, encoding)\n  }\n\n  if (Buffer.isBuffer(val)) {\n    return fillWithBuffer(buffer, val, start, end)\n  }\n\n  // Other values (e.g. undefined, boolean, object) results in zero-fill\n  return fillWithNumber(buffer, 0, start, end)\n}\n\nmodule.exports = fill\n"]},"metadata":{},"sourceType":"script"}