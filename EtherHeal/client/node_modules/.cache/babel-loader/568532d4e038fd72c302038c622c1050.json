{"ast":null,"code":"'use strict';\n\nconst dagPB = require('ipld-dag-pb');\n\nconst dagCBOR = require('ipld-dag-cbor');\n\nconst promisify = require('promisify-es6');\n\nconst CID = require('cids');\n\nconst waterfall = require('async/waterfall');\n\nconst block = require('../block');\n\nconst resolvers = {\n  'dag-cbor': dagCBOR.resolver,\n  'dag-pb': dagPB.resolver\n};\n\nmodule.exports = send => {\n  return promisify((cid, path, options, callback) => {\n    if (typeof path === 'function') {\n      callback = path;\n      path = undefined;\n    }\n\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    options = options || {};\n    path = path || '';\n\n    if (CID.isCID(cid)) {\n      cid = cid.toBaseEncodedString();\n    }\n\n    waterfall([cb => {\n      send({\n        path: 'dag/resolve',\n        args: cid + '/' + path,\n        qs: options\n      }, cb);\n    }, (resolved, cb) => {\n      block(send).get(new CID(resolved['Cid']['/']), (err, ipfsBlock) => {\n        cb(err, ipfsBlock, resolved['RemPath']);\n      });\n    }, (ipfsBlock, path, cb) => {\n      const dagResolver = resolvers[ipfsBlock.cid.codec];\n\n      if (!dagResolver) {\n        const error = new Error('ipfs-api is missing DAG resolver for \"' + ipfsBlock.cid.codec + '\" multicodec');\n        error.missingMulticodec = ipfsBlock.cid.codec;\n        cb(error);\n        return;\n      }\n\n      dagResolver.resolve(ipfsBlock.data, path, cb);\n    }], callback);\n  });\n};","map":{"version":3,"sources":["Z:/Projects/EtherealOrgan/Complete Project/client/node_modules/ipfs-api/src/dag/get.js"],"names":["dagPB","require","dagCBOR","promisify","CID","waterfall","block","resolvers","resolver","module","exports","send","cid","path","options","callback","undefined","isCID","toBaseEncodedString","cb","args","qs","resolved","get","err","ipfsBlock","dagResolver","codec","error","Error","missingMulticodec","resolve","data"],"mappings":"AAAA;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,aAAD,CAArB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,eAAD,CAAvB;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,eAAD,CAAzB;;AACA,MAAMG,GAAG,GAAGH,OAAO,CAAC,MAAD,CAAnB;;AACA,MAAMI,SAAS,GAAGJ,OAAO,CAAC,iBAAD,CAAzB;;AACA,MAAMK,KAAK,GAAGL,OAAO,CAAC,UAAD,CAArB;;AAEA,MAAMM,SAAS,GAAG;AAChB,cAAYL,OAAO,CAACM,QADJ;AAEhB,YAAUR,KAAK,CAACQ;AAFA,CAAlB;;AAKAC,MAAM,CAACC,OAAP,GAAkBC,IAAD,IAAU;AACzB,SAAOR,SAAS,CAAC,CAACS,GAAD,EAAMC,IAAN,EAAYC,OAAZ,EAAqBC,QAArB,KAAkC;AACjD,QAAI,OAAOF,IAAP,KAAgB,UAApB,EAAgC;AAC9BE,MAAAA,QAAQ,GAAGF,IAAX;AACAA,MAAAA,IAAI,GAAGG,SAAP;AACD;;AAED,QAAI,OAAOF,OAAP,KAAmB,UAAvB,EAAmC;AACjCC,MAAAA,QAAQ,GAAGD,OAAX;AACAA,MAAAA,OAAO,GAAG,EAAV;AACD;;AAEDA,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACAD,IAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf;;AAEA,QAAIT,GAAG,CAACa,KAAJ,CAAUL,GAAV,CAAJ,EAAoB;AAClBA,MAAAA,GAAG,GAAGA,GAAG,CAACM,mBAAJ,EAAN;AACD;;AAEDb,IAAAA,SAAS,CAAC,CACRc,EAAE,IAAI;AACJR,MAAAA,IAAI,CAAC;AACHE,QAAAA,IAAI,EAAE,aADH;AAEHO,QAAAA,IAAI,EAAER,GAAG,GAAG,GAAN,GAAYC,IAFf;AAGHQ,QAAAA,EAAE,EAAEP;AAHD,OAAD,EAIDK,EAJC,CAAJ;AAKD,KAPO,EAQR,CAACG,QAAD,EAAWH,EAAX,KAAkB;AAChBb,MAAAA,KAAK,CAACK,IAAD,CAAL,CAAYY,GAAZ,CAAgB,IAAInB,GAAJ,CAAQkB,QAAQ,CAAC,KAAD,CAAR,CAAgB,GAAhB,CAAR,CAAhB,EAA+C,CAACE,GAAD,EAAMC,SAAN,KAAoB;AACjEN,QAAAA,EAAE,CAACK,GAAD,EAAMC,SAAN,EAAiBH,QAAQ,CAAC,SAAD,CAAzB,CAAF;AACD,OAFD;AAGD,KAZO,EAaR,CAACG,SAAD,EAAYZ,IAAZ,EAAkBM,EAAlB,KAAyB;AACvB,YAAMO,WAAW,GAAGnB,SAAS,CAACkB,SAAS,CAACb,GAAV,CAAce,KAAf,CAA7B;;AACA,UAAI,CAACD,WAAL,EAAkB;AAChB,cAAME,KAAK,GAAG,IAAIC,KAAJ,CAAU,2CAA2CJ,SAAS,CAACb,GAAV,CAAce,KAAzD,GAAiE,cAA3E,CAAd;AACAC,QAAAA,KAAK,CAACE,iBAAN,GAA0BL,SAAS,CAACb,GAAV,CAAce,KAAxC;AACAR,QAAAA,EAAE,CAACS,KAAD,CAAF;AACA;AACD;;AACDF,MAAAA,WAAW,CAACK,OAAZ,CAAoBN,SAAS,CAACO,IAA9B,EAAoCnB,IAApC,EAA0CM,EAA1C;AACD,KAtBO,CAAD,EAuBNJ,QAvBM,CAAT;AAwBD,GA1Ce,CAAhB;AA2CD,CA5CD","sourcesContent":["'use strict'\n\nconst dagPB = require('ipld-dag-pb')\nconst dagCBOR = require('ipld-dag-cbor')\nconst promisify = require('promisify-es6')\nconst CID = require('cids')\nconst waterfall = require('async/waterfall')\nconst block = require('../block')\n\nconst resolvers = {\n  'dag-cbor': dagCBOR.resolver,\n  'dag-pb': dagPB.resolver\n}\n\nmodule.exports = (send) => {\n  return promisify((cid, path, options, callback) => {\n    if (typeof path === 'function') {\n      callback = path\n      path = undefined\n    }\n\n    if (typeof options === 'function') {\n      callback = options\n      options = {}\n    }\n\n    options = options || {}\n    path = path || ''\n\n    if (CID.isCID(cid)) {\n      cid = cid.toBaseEncodedString()\n    }\n\n    waterfall([\n      cb => {\n        send({\n          path: 'dag/resolve',\n          args: cid + '/' + path,\n          qs: options\n        }, cb)\n      },\n      (resolved, cb) => {\n        block(send).get(new CID(resolved['Cid']['/']), (err, ipfsBlock) => {\n          cb(err, ipfsBlock, resolved['RemPath'])\n        })\n      },\n      (ipfsBlock, path, cb) => {\n        const dagResolver = resolvers[ipfsBlock.cid.codec]\n        if (!dagResolver) {\n          const error = new Error('ipfs-api is missing DAG resolver for \"' + ipfsBlock.cid.codec + '\" multicodec')\n          error.missingMulticodec = ipfsBlock.cid.codec\n          cb(error)\n          return\n        }\n        dagResolver.resolve(ipfsBlock.data, path, cb)\n      }\n    ], callback)\n  })\n}\n"]},"metadata":{},"sourceType":"script"}