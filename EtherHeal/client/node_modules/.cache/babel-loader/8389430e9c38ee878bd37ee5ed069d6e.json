{"ast":null,"code":"'use strict';\n\nconst assert = require('assert');\n\nconst withIs = require('class-is');\n\nconst CID = require('cids');\n\nclass DAGNode {\n  constructor(data, links, serialized, multihash) {\n    assert(serialized, 'DAGNode needs its serialized format');\n    assert(multihash, 'DAGNode needs its multihash');\n    this._cid = new CID(multihash);\n    this._data = data || Buffer.alloc(0);\n    this._links = links || [];\n    this._serialized = serialized;\n  }\n\n  toJSON() {\n    if (!this._json) {\n      this._json = Object.freeze({\n        data: this.data,\n        links: this.links.map(l => l.toJSON()),\n        multihash: this._cid.toBaseEncodedString(),\n        size: this.size\n      });\n    }\n\n    return Object.assign({}, this._json);\n  }\n\n  toString() {\n    return `DAGNode <${this._cid.toBaseEncodedString()} - data: \"${this.data.toString()}\", links: ${this.links.length}, size: ${this.size}>`;\n  }\n\n  get data() {\n    return this._data;\n  }\n\n  set data(data) {\n    throw new Error(\"Can't set property: 'data' is immutable\");\n  }\n\n  get links() {\n    return this._links;\n  }\n\n  set links(links) {\n    throw new Error(\"Can't set property: 'links' is immutable\");\n  }\n\n  get serialized() {\n    return this._serialized;\n  }\n\n  set serialized(serialized) {\n    throw new Error(\"Can't set property: 'serialized' is immutable\");\n  }\n\n  get size() {\n    if (this._size === undefined) {\n      this._size = this.links.reduce((sum, l) => sum + l.size, this.serialized.length);\n    }\n\n    return this._size;\n  }\n\n  set size(size) {\n    throw new Error(\"Can't set property: 'size' is immutable\");\n  }\n\n  get multihash() {\n    return this._cid.buffer;\n  }\n\n  set multihash(multihash) {\n    throw new Error(\"Can't set property: 'multihash' is immutable\");\n  }\n\n  get cid() {\n    return this._cid;\n  }\n\n  set cid(cid) {\n    throw new Error(\"Can't set property: 'cid' is immutable\");\n  }\n\n}\n\nexports = module.exports = withIs(DAGNode, {\n  className: 'DAGNode',\n  symbolName: '@ipld/js-ipld-dag-pb/dagnode'\n});\nexports.create = require('./create');\nexports.clone = require('./clone');\nexports.addLink = require('./addLink');\nexports.rmLink = require('./rmLink');","map":{"version":3,"sources":["z:/Projects/EtherealOrgan-Halo/Complete Project/client/node_modules/ipld-dag-pb/src/dag-node/index.js"],"names":["assert","require","withIs","CID","DAGNode","constructor","data","links","serialized","multihash","_cid","_data","Buffer","alloc","_links","_serialized","toJSON","_json","Object","freeze","map","l","toBaseEncodedString","size","assign","toString","length","Error","_size","undefined","reduce","sum","buffer","cid","exports","module","className","symbolName","create","clone","addLink","rmLink"],"mappings":"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","sourcesContent":["'use strict'\n\nconst assert = require('assert')\nconst withIs = require('class-is')\nconst CID = require('cids')\n\nclass DAGNode {\n  constructor (data, links, serialized, multihash) {\n    assert(serialized, 'DAGNode needs its serialized format')\n    assert(multihash, 'DAGNode needs its multihash')\n\n    this._cid = new CID(multihash)\n    this._data = data || Buffer.alloc(0)\n    this._links = links || []\n    this._serialized = serialized\n  }\n\n  toJSON () {\n    if (!this._json) {\n      this._json = Object.freeze({\n        data: this.data,\n        links: this.links.map((l) => l.toJSON()),\n        multihash: this._cid.toBaseEncodedString(),\n        size: this.size\n      })\n    }\n\n    return Object.assign({}, this._json)\n  }\n\n  toString () {\n    return `DAGNode <${this._cid.toBaseEncodedString()} - data: \"${this.data.toString()}\", links: ${this.links.length}, size: ${this.size}>`\n  }\n\n  get data () {\n    return this._data\n  }\n\n  set data (data) {\n    throw new Error(\"Can't set property: 'data' is immutable\")\n  }\n\n  get links () {\n    return this._links\n  }\n\n  set links (links) {\n    throw new Error(\"Can't set property: 'links' is immutable\")\n  }\n\n  get serialized () {\n    return this._serialized\n  }\n\n  set serialized (serialized) {\n    throw new Error(\"Can't set property: 'serialized' is immutable\")\n  }\n\n  get size () {\n    if (this._size === undefined) {\n      this._size = this.links.reduce((sum, l) => sum + l.size, this.serialized.length)\n    }\n\n    return this._size\n  }\n\n  set size (size) {\n    throw new Error(\"Can't set property: 'size' is immutable\")\n  }\n\n  get multihash () {\n    return this._cid.buffer\n  }\n\n  set multihash (multihash) {\n    throw new Error(\"Can't set property: 'multihash' is immutable\")\n  }\n\n  get cid () {\n    return this._cid\n  }\n\n  set cid (cid) {\n    throw new Error(\"Can't set property: 'cid' is immutable\")\n  }\n}\n\nexports = module.exports = withIs(DAGNode, { className: 'DAGNode', symbolName: '@ipld/js-ipld-dag-pb/dagnode' })\nexports.create = require('./create')\nexports.clone = require('./clone')\nexports.addLink = require('./addLink')\nexports.rmLink = require('./rmLink')\n"]},"metadata":{},"sourceType":"script"}