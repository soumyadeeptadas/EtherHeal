{"ast":null,"code":"var bufferFill = require('buffer-fill');\n\nvar allocUnsafe = require('buffer-alloc-unsafe');\n\nmodule.exports = function alloc(size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number');\n  }\n\n  if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative');\n  }\n\n  if (Buffer.alloc) {\n    return Buffer.alloc(size, fill, encoding);\n  }\n\n  var buffer = allocUnsafe(size);\n\n  if (size === 0) {\n    return buffer;\n  }\n\n  if (fill === undefined) {\n    return bufferFill(buffer, 0);\n  }\n\n  if (typeof encoding !== 'string') {\n    encoding = undefined;\n  }\n\n  return bufferFill(buffer, fill, encoding);\n};","map":{"version":3,"sources":["Z:/Projects/Organ-Donation-Transplant-Chain-master/Complete Project/client/node_modules/buffer-alloc/index.js"],"names":["bufferFill","require","allocUnsafe","module","exports","alloc","size","fill","encoding","TypeError","RangeError","Buffer","buffer","undefined"],"mappings":"AAAA,IAAIA,UAAU,GAAGC,OAAO,CAAC,aAAD,CAAxB;;AACA,IAAIC,WAAW,GAAGD,OAAO,CAAC,qBAAD,CAAzB;;AAEAE,MAAM,CAACC,OAAP,GAAiB,SAASC,KAAT,CAAgBC,IAAhB,EAAsBC,IAAtB,EAA4BC,QAA5B,EAAsC;AACrD,MAAI,OAAOF,IAAP,KAAgB,QAApB,EAA8B;AAC5B,UAAM,IAAIG,SAAJ,CAAc,kCAAd,CAAN;AACD;;AAED,MAAIH,IAAI,GAAG,CAAX,EAAc;AACZ,UAAM,IAAII,UAAJ,CAAe,sCAAf,CAAN;AACD;;AAED,MAAIC,MAAM,CAACN,KAAX,EAAkB;AAChB,WAAOM,MAAM,CAACN,KAAP,CAAaC,IAAb,EAAmBC,IAAnB,EAAyBC,QAAzB,CAAP;AACD;;AAED,MAAII,MAAM,GAAGV,WAAW,CAACI,IAAD,CAAxB;;AAEA,MAAIA,IAAI,KAAK,CAAb,EAAgB;AACd,WAAOM,MAAP;AACD;;AAED,MAAIL,IAAI,KAAKM,SAAb,EAAwB;AACtB,WAAOb,UAAU,CAACY,MAAD,EAAS,CAAT,CAAjB;AACD;;AAED,MAAI,OAAOJ,QAAP,KAAoB,QAAxB,EAAkC;AAChCA,IAAAA,QAAQ,GAAGK,SAAX;AACD;;AAED,SAAOb,UAAU,CAACY,MAAD,EAASL,IAAT,EAAeC,QAAf,CAAjB;AACD,CA5BD","sourcesContent":["var bufferFill = require('buffer-fill')\nvar allocUnsafe = require('buffer-alloc-unsafe')\n\nmodule.exports = function alloc (size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  }\n\n  if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n\n  if (Buffer.alloc) {\n    return Buffer.alloc(size, fill, encoding)\n  }\n\n  var buffer = allocUnsafe(size)\n\n  if (size === 0) {\n    return buffer\n  }\n\n  if (fill === undefined) {\n    return bufferFill(buffer, 0)\n  }\n\n  if (typeof encoding !== 'string') {\n    encoding = undefined\n  }\n\n  return bufferFill(buffer, fill, encoding)\n}\n"]},"metadata":{},"sourceType":"script"}