{"ast":null,"code":"'use strict';\n\nconst promisify = require('promisify-es6');\n\nconst parseUrl = require('url').parse;\n\nconst request = require('../utils/request');\n\nconst SendOneFile = require('../utils/send-one-file-multiple-results');\n\nconst FileResultStreamConverter = require('../utils/file-result-stream-converter');\n\nmodule.exports = send => {\n  const sendOneFile = SendOneFile(send, 'add');\n  return promisify((url, opts, callback) => {\n    if (typeof opts === 'function' && callback === undefined) {\n      callback = opts;\n      opts = {};\n    } // opts is the real callback --\n    // 'callback' is being injected by promisify\n\n\n    if (typeof opts === 'function' && typeof callback === 'function') {\n      callback = opts;\n      opts = {};\n    }\n\n    if (!validUrl(url)) {\n      return callback(new Error('\"url\" param must be an http(s) url'));\n    }\n\n    requestWithRedirect(url, opts, sendOneFile, callback);\n  });\n};\n\nconst validUrl = url => typeof url === 'string' && url.startsWith('http');\n\nconst requestWithRedirect = (url, opts, sendOneFile, callback) => {\n  const parsedUrl = parseUrl(url);\n  const req = request(parsedUrl.protocol)(url, res => {\n    if (res.statusCode >= 400) {\n      return callback(new Error(`Failed to download with ${res.statusCode}`));\n    }\n\n    const redirection = res.headers.location;\n\n    if (res.statusCode >= 300 && res.statusCode < 400 && redirection) {\n      if (!validUrl(redirection)) {\n        return callback(new Error('redirection url must be an http(s) url'));\n      }\n\n      requestWithRedirect(redirection, opts, sendOneFile, callback);\n    } else {\n      const requestOpts = {\n        qs: opts,\n        converter: FileResultStreamConverter\n      };\n      const fileName = decodeURIComponent(parsedUrl.pathname.split('/').pop());\n      sendOneFile({\n        content: res,\n        path: fileName\n      }, requestOpts, callback);\n    }\n  });\n  req.once('error', callback);\n  req.end();\n};","map":{"version":3,"sources":["z:/Projects/EtherealOrgan-Halo/Complete Project/client/node_modules/ipfs-api/src/util/url-add.js"],"names":["promisify","require","parseUrl","parse","request","SendOneFile","FileResultStreamConverter","module","exports","send","sendOneFile","url","opts","callback","undefined","validUrl","Error","requestWithRedirect","startsWith","parsedUrl","req","protocol","res","statusCode","redirection","headers","location","requestOpts","qs","converter","fileName","decodeURIComponent","pathname","split","pop","content","path","once","end"],"mappings":"AAAA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,eAAD,CAAzB;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,KAAD,CAAP,CAAeE,KAAhC;;AACA,MAAMC,OAAO,GAAGH,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAMI,WAAW,GAAGJ,OAAO,CAAC,yCAAD,CAA3B;;AACA,MAAMK,yBAAyB,GAAGL,OAAO,CAAC,uCAAD,CAAzC;;AAEAM,MAAM,CAACC,OAAP,GAAkBC,IAAD,IAAU;AACzB,QAAMC,WAAW,GAAGL,WAAW,CAACI,IAAD,EAAO,KAAP,CAA/B;AAEA,SAAOT,SAAS,CAAC,CAACW,GAAD,EAAMC,IAAN,EAAYC,QAAZ,KAAyB;AACxC,QAAI,OAAQD,IAAR,KAAkB,UAAlB,IACAC,QAAQ,KAAKC,SADjB,EAC4B;AAC1BD,MAAAA,QAAQ,GAAGD,IAAX;AACAA,MAAAA,IAAI,GAAG,EAAP;AACD,KALuC,CAOxC;AACA;;;AACA,QAAI,OAAOA,IAAP,KAAgB,UAAhB,IACA,OAAOC,QAAP,KAAoB,UADxB,EACoC;AAClCA,MAAAA,QAAQ,GAAGD,IAAX;AACAA,MAAAA,IAAI,GAAG,EAAP;AACD;;AAED,QAAI,CAACG,QAAQ,CAACJ,GAAD,CAAb,EAAoB;AAClB,aAAOE,QAAQ,CAAC,IAAIG,KAAJ,CAAU,oCAAV,CAAD,CAAf;AACD;;AAEDC,IAAAA,mBAAmB,CAACN,GAAD,EAAMC,IAAN,EAAYF,WAAZ,EAAyBG,QAAzB,CAAnB;AACD,GApBe,CAAhB;AAqBD,CAxBD;;AA0BA,MAAME,QAAQ,GAAIJ,GAAD,IAAS,OAAOA,GAAP,KAAe,QAAf,IAA2BA,GAAG,CAACO,UAAJ,CAAe,MAAf,CAArD;;AAEA,MAAMD,mBAAmB,GAAG,CAACN,GAAD,EAAMC,IAAN,EAAYF,WAAZ,EAAyBG,QAAzB,KAAsC;AAChE,QAAMM,SAAS,GAAGjB,QAAQ,CAACS,GAAD,CAA1B;AAEA,QAAMS,GAAG,GAAGhB,OAAO,CAACe,SAAS,CAACE,QAAX,CAAP,CAA4BV,GAA5B,EAAkCW,GAAD,IAAS;AACpD,QAAIA,GAAG,CAACC,UAAJ,IAAkB,GAAtB,EAA2B;AACzB,aAAOV,QAAQ,CAAC,IAAIG,KAAJ,CAAW,2BAA0BM,GAAG,CAACC,UAAW,EAApD,CAAD,CAAf;AACD;;AAED,UAAMC,WAAW,GAAGF,GAAG,CAACG,OAAJ,CAAYC,QAAhC;;AAEA,QAAIJ,GAAG,CAACC,UAAJ,IAAkB,GAAlB,IAAyBD,GAAG,CAACC,UAAJ,GAAiB,GAA1C,IAAiDC,WAArD,EAAkE;AAChE,UAAI,CAACT,QAAQ,CAACS,WAAD,CAAb,EAA4B;AAC1B,eAAOX,QAAQ,CAAC,IAAIG,KAAJ,CAAU,wCAAV,CAAD,CAAf;AACD;;AAEDC,MAAAA,mBAAmB,CAACO,WAAD,EAAcZ,IAAd,EAAoBF,WAApB,EAAiCG,QAAjC,CAAnB;AACD,KAND,MAMO;AACL,YAAMc,WAAW,GAAG;AAClBC,QAAAA,EAAE,EAAEhB,IADc;AAElBiB,QAAAA,SAAS,EAAEvB;AAFO,OAApB;AAIA,YAAMwB,QAAQ,GAAGC,kBAAkB,CAACZ,SAAS,CAACa,QAAV,CAAmBC,KAAnB,CAAyB,GAAzB,EAA8BC,GAA9B,EAAD,CAAnC;AAEAxB,MAAAA,WAAW,CAAC;AACVyB,QAAAA,OAAO,EAAEb,GADC;AAEVc,QAAAA,IAAI,EAAEN;AAFI,OAAD,EAGRH,WAHQ,EAGKd,QAHL,CAAX;AAID;AACF,GAzBW,CAAZ;AA2BAO,EAAAA,GAAG,CAACiB,IAAJ,CAAS,OAAT,EAAkBxB,QAAlB;AAEAO,EAAAA,GAAG,CAACkB,GAAJ;AACD,CAjCD","sourcesContent":["'use strict'\n\nconst promisify = require('promisify-es6')\nconst parseUrl = require('url').parse\nconst request = require('../utils/request')\nconst SendOneFile = require('../utils/send-one-file-multiple-results')\nconst FileResultStreamConverter = require('../utils/file-result-stream-converter')\n\nmodule.exports = (send) => {\n  const sendOneFile = SendOneFile(send, 'add')\n\n  return promisify((url, opts, callback) => {\n    if (typeof (opts) === 'function' &&\n        callback === undefined) {\n      callback = opts\n      opts = {}\n    }\n\n    // opts is the real callback --\n    // 'callback' is being injected by promisify\n    if (typeof opts === 'function' &&\n        typeof callback === 'function') {\n      callback = opts\n      opts = {}\n    }\n\n    if (!validUrl(url)) {\n      return callback(new Error('\"url\" param must be an http(s) url'))\n    }\n\n    requestWithRedirect(url, opts, sendOneFile, callback)\n  })\n}\n\nconst validUrl = (url) => typeof url === 'string' && url.startsWith('http')\n\nconst requestWithRedirect = (url, opts, sendOneFile, callback) => {\n  const parsedUrl = parseUrl(url)\n\n  const req = request(parsedUrl.protocol)(url, (res) => {\n    if (res.statusCode >= 400) {\n      return callback(new Error(`Failed to download with ${res.statusCode}`))\n    }\n\n    const redirection = res.headers.location\n\n    if (res.statusCode >= 300 && res.statusCode < 400 && redirection) {\n      if (!validUrl(redirection)) {\n        return callback(new Error('redirection url must be an http(s) url'))\n      }\n\n      requestWithRedirect(redirection, opts, sendOneFile, callback)\n    } else {\n      const requestOpts = {\n        qs: opts,\n        converter: FileResultStreamConverter\n      }\n      const fileName = decodeURIComponent(parsedUrl.pathname.split('/').pop())\n\n      sendOneFile({\n        content: res,\n        path: fileName\n      }, requestOpts, callback)\n    }\n  })\n\n  req.once('error', callback)\n\n  req.end()\n}\n"]},"metadata":{},"sourceType":"script"}