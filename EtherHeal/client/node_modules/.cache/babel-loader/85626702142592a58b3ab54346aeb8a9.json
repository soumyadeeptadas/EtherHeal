{"ast":null,"code":"'use strict';\n\nconst nodeify = require('../nodeify');\n\nconst crypto = require('../webcrypto.js')();\n\nconst lengths = require('./lengths');\n\nconst hashTypes = {\n  SHA1: 'SHA-1',\n  SHA256: 'SHA-256',\n  SHA512: 'SHA-512'\n};\n\nconst sign = (key, data, cb) => {\n  nodeify(crypto.subtle.sign({\n    name: 'HMAC'\n  }, key, data).then(raw => Buffer.from(raw)), cb);\n};\n\nexports.create = function (hashType, secret, callback) {\n  const hash = hashTypes[hashType];\n  nodeify(crypto.subtle.importKey('raw', secret, {\n    name: 'HMAC',\n    hash: {\n      name: hash\n    }\n  }, false, ['sign']).then(key => {\n    return {\n      digest(data, cb) {\n        sign(key, data, cb);\n      },\n\n      length: lengths[hashType]\n    };\n  }), callback);\n};","map":{"version":3,"sources":["Z:/Projects/Organ-Donation-Transplant-Chain-master/Complete Project/client/node_modules/peer-info/node_modules/libp2p-crypto/src/hmac/index-browser.js"],"names":["nodeify","require","crypto","lengths","hashTypes","SHA1","SHA256","SHA512","sign","key","data","cb","subtle","name","then","raw","Buffer","from","exports","create","hashType","secret","callback","hash","importKey","digest","length"],"mappings":"AAAA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,YAAD,CAAvB;;AAEA,MAAMC,MAAM,GAAGD,OAAO,CAAC,iBAAD,CAAP,EAAf;;AACA,MAAME,OAAO,GAAGF,OAAO,CAAC,WAAD,CAAvB;;AAEA,MAAMG,SAAS,GAAG;AAChBC,EAAAA,IAAI,EAAE,OADU;AAEhBC,EAAAA,MAAM,EAAE,SAFQ;AAGhBC,EAAAA,MAAM,EAAE;AAHQ,CAAlB;;AAMA,MAAMC,IAAI,GAAG,CAACC,GAAD,EAAMC,IAAN,EAAYC,EAAZ,KAAmB;AAC9BX,EAAAA,OAAO,CAACE,MAAM,CAACU,MAAP,CAAcJ,IAAd,CAAmB;AAACK,IAAAA,IAAI,EAAE;AAAP,GAAnB,EAAmCJ,GAAnC,EAAwCC,IAAxC,EACLI,IADK,CACCC,GAAD,IAASC,MAAM,CAACC,IAAP,CAAYF,GAAZ,CADT,CAAD,EAC6BJ,EAD7B,CAAP;AAED,CAHD;;AAKAO,OAAO,CAACC,MAAR,GAAiB,UAAUC,QAAV,EAAoBC,MAApB,EAA4BC,QAA5B,EAAsC;AACrD,QAAMC,IAAI,GAAGnB,SAAS,CAACgB,QAAD,CAAtB;AAEApB,EAAAA,OAAO,CAACE,MAAM,CAACU,MAAP,CAAcY,SAAd,CACN,KADM,EAENH,MAFM,EAGN;AACER,IAAAA,IAAI,EAAE,MADR;AAEEU,IAAAA,IAAI,EAAE;AAACV,MAAAA,IAAI,EAAEU;AAAP;AAFR,GAHM,EAON,KAPM,EAQN,CAAC,MAAD,CARM,EASNT,IATM,CASAL,GAAD,IAAS;AACd,WAAO;AACLgB,MAAAA,MAAM,CAAEf,IAAF,EAAQC,EAAR,EAAY;AAChBH,QAAAA,IAAI,CAACC,GAAD,EAAMC,IAAN,EAAYC,EAAZ,CAAJ;AACD,OAHI;;AAILe,MAAAA,MAAM,EAAEvB,OAAO,CAACiB,QAAD;AAJV,KAAP;AAMD,GAhBO,CAAD,EAgBHE,QAhBG,CAAP;AAiBD,CApBD","sourcesContent":["'use strict'\n\nconst nodeify = require('../nodeify')\n\nconst crypto = require('../webcrypto.js')()\nconst lengths = require('./lengths')\n\nconst hashTypes = {\n  SHA1: 'SHA-1',\n  SHA256: 'SHA-256',\n  SHA512: 'SHA-512'\n}\n\nconst sign = (key, data, cb) => {\n  nodeify(crypto.subtle.sign({name: 'HMAC'}, key, data)\n    .then((raw) => Buffer.from(raw)), cb)\n}\n\nexports.create = function (hashType, secret, callback) {\n  const hash = hashTypes[hashType]\n\n  nodeify(crypto.subtle.importKey(\n    'raw',\n    secret,\n    {\n      name: 'HMAC',\n      hash: {name: hash}\n    },\n    false,\n    ['sign']\n  ).then((key) => {\n    return {\n      digest (data, cb) {\n        sign(key, data, cb)\n      },\n      length: lengths[hashType]\n    }\n  }), callback)\n}\n"]},"metadata":{},"sourceType":"script"}