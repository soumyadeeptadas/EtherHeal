{"ast":null,"code":"'use strict';\n\nconst promisify = require('promisify-es6');\n\nconst cleanCID = require('../utils/clean-cid');\n\nconst TarStreamToObjects = require('../utils/tar-stream-to-objects');\n\nconst concat = require('concat-stream');\n\nconst through = require('through2');\n\nconst v = require('is-ipfs');\n\nmodule.exports = send => {\n  return promisify((path, opts, callback) => {\n    if (typeof opts === 'function' && !callback) {\n      callback = opts;\n      opts = {};\n    } // opts is the real callback --\n    // 'callback' is being injected by promisify\n\n\n    if (typeof opts === 'function' && typeof callback === 'function') {\n      callback = opts;\n      opts = {};\n    }\n\n    try {\n      path = cleanCID(path);\n    } catch (err) {\n      if (!v.ipfsPath(path)) {\n        return callback(err);\n      }\n    }\n\n    const request = {\n      path: 'get',\n      args: path,\n      qs: opts\n    }; // Convert the response stream to TarStream objects\n\n    send.andTransform(request, TarStreamToObjects, (err, stream) => {\n      if (err) {\n        return callback(err);\n      }\n\n      const files = [];\n      stream.pipe(through.obj((file, enc, next) => {\n        if (file.content) {\n          file.content.pipe(concat(content => {\n            files.push({\n              path: file.path,\n              content: content\n            });\n          }));\n        } else {\n          files.push(file);\n        }\n\n        next();\n      }, () => callback(null, files)));\n    });\n  });\n};","map":{"version":3,"sources":["Z:/Projects/Rakuten Hack/EtherealHeal/Complete Project/client/node_modules/ipfs-api/src/files/get.js"],"names":["promisify","require","cleanCID","TarStreamToObjects","concat","through","v","module","exports","send","path","opts","callback","err","ipfsPath","request","args","qs","andTransform","stream","files","pipe","obj","file","enc","next","content","push"],"mappings":"AAAA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,eAAD,CAAzB;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,oBAAD,CAAxB;;AACA,MAAME,kBAAkB,GAAGF,OAAO,CAAC,gCAAD,CAAlC;;AACA,MAAMG,MAAM,GAAGH,OAAO,CAAC,eAAD,CAAtB;;AACA,MAAMI,OAAO,GAAGJ,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAMK,CAAC,GAAGL,OAAO,CAAC,SAAD,CAAjB;;AAEAM,MAAM,CAACC,OAAP,GAAkBC,IAAD,IAAU;AACzB,SAAOT,SAAS,CAAC,CAACU,IAAD,EAAOC,IAAP,EAAaC,QAAb,KAA0B;AACzC,QAAI,OAAOD,IAAP,KAAgB,UAAhB,IAA8B,CAACC,QAAnC,EAA6C;AAC3CA,MAAAA,QAAQ,GAAGD,IAAX;AACAA,MAAAA,IAAI,GAAG,EAAP;AACD,KAJwC,CAMzC;AACA;;;AACA,QAAI,OAAOA,IAAP,KAAgB,UAAhB,IAA8B,OAAOC,QAAP,KAAoB,UAAtD,EAAkE;AAChEA,MAAAA,QAAQ,GAAGD,IAAX;AACAA,MAAAA,IAAI,GAAG,EAAP;AACD;;AAED,QAAI;AACFD,MAAAA,IAAI,GAAGR,QAAQ,CAACQ,IAAD,CAAf;AACD,KAFD,CAEE,OAAOG,GAAP,EAAY;AACZ,UAAI,CAACP,CAAC,CAACQ,QAAF,CAAWJ,IAAX,CAAL,EAAuB;AACrB,eAAOE,QAAQ,CAACC,GAAD,CAAf;AACD;AACF;;AAED,UAAME,OAAO,GAAG;AAAEL,MAAAA,IAAI,EAAE,KAAR;AAAeM,MAAAA,IAAI,EAAEN,IAArB;AAA2BO,MAAAA,EAAE,EAAEN;AAA/B,KAAhB,CArByC,CAuBzC;;AACAF,IAAAA,IAAI,CAACS,YAAL,CAAkBH,OAAlB,EAA2BZ,kBAA3B,EAA+C,CAACU,GAAD,EAAMM,MAAN,KAAiB;AAC9D,UAAIN,GAAJ,EAAS;AAAE,eAAOD,QAAQ,CAACC,GAAD,CAAf;AAAsB;;AAEjC,YAAMO,KAAK,GAAG,EAAd;AAEAD,MAAAA,MAAM,CAACE,IAAP,CAAYhB,OAAO,CAACiB,GAAR,CAAY,CAACC,IAAD,EAAOC,GAAP,EAAYC,IAAZ,KAAqB;AAC3C,YAAIF,IAAI,CAACG,OAAT,EAAkB;AAChBH,UAAAA,IAAI,CAACG,OAAL,CAAaL,IAAb,CAAkBjB,MAAM,CAAEsB,OAAD,IAAa;AACpCN,YAAAA,KAAK,CAACO,IAAN,CAAW;AAAEjB,cAAAA,IAAI,EAAEa,IAAI,CAACb,IAAb;AAAmBgB,cAAAA,OAAO,EAAEA;AAA5B,aAAX;AACD,WAFuB,CAAxB;AAGD,SAJD,MAIO;AACLN,UAAAA,KAAK,CAACO,IAAN,CAAWJ,IAAX;AACD;;AACDE,QAAAA,IAAI;AACL,OATW,EAST,MAAMb,QAAQ,CAAC,IAAD,EAAOQ,KAAP,CATL,CAAZ;AAUD,KAfD;AAgBD,GAxCe,CAAhB;AAyCD,CA1CD","sourcesContent":["'use strict'\n\nconst promisify = require('promisify-es6')\nconst cleanCID = require('../utils/clean-cid')\nconst TarStreamToObjects = require('../utils/tar-stream-to-objects')\nconst concat = require('concat-stream')\nconst through = require('through2')\nconst v = require('is-ipfs')\n\nmodule.exports = (send) => {\n  return promisify((path, opts, callback) => {\n    if (typeof opts === 'function' && !callback) {\n      callback = opts\n      opts = {}\n    }\n\n    // opts is the real callback --\n    // 'callback' is being injected by promisify\n    if (typeof opts === 'function' && typeof callback === 'function') {\n      callback = opts\n      opts = {}\n    }\n\n    try {\n      path = cleanCID(path)\n    } catch (err) {\n      if (!v.ipfsPath(path)) {\n        return callback(err)\n      }\n    }\n\n    const request = { path: 'get', args: path, qs: opts }\n\n    // Convert the response stream to TarStream objects\n    send.andTransform(request, TarStreamToObjects, (err, stream) => {\n      if (err) { return callback(err) }\n\n      const files = []\n\n      stream.pipe(through.obj((file, enc, next) => {\n        if (file.content) {\n          file.content.pipe(concat((content) => {\n            files.push({ path: file.path, content: content })\n          }))\n        } else {\n          files.push(file)\n        }\n        next()\n      }, () => callback(null, files)))\n    })\n  })\n}\n"]},"metadata":{},"sourceType":"script"}