{"ast":null,"code":"'use strict';\n\nconst pump = require('pump');\n\nconst tar = require('tar-stream');\n\nconst ReadableStream = require('readable-stream').Readable;\n\nclass ObjectsStreams extends ReadableStream {\n  constructor(options) {\n    const opts = Object.assign(options || {}, {\n      objectMode: true\n    });\n    super(opts);\n  }\n\n  _read() {}\n\n}\n/*\n  Transform a tar stream into a stream of objects:\n\n  Output format:\n  { path: 'string', content: Stream<Readable> }\n*/\n\n\nconst TarStreamToObjects = (inputStream, callback) => {\n  let outputStream = new ObjectsStreams();\n  let extractStream = tar.extract();\n  extractStream.on('entry', (header, stream, next) => {\n    stream.on('end', next);\n\n    if (header.type !== 'directory') {\n      outputStream.push({\n        path: header.name,\n        content: stream\n      });\n    } else {\n      outputStream.push({\n        path: header.name\n      });\n      stream.resume();\n    }\n  }).on('finish', () => outputStream.push(null));\n  pump(inputStream, extractStream);\n  callback(null, outputStream);\n};\n\nmodule.exports = TarStreamToObjects;","map":{"version":3,"sources":["Z:/Projects/Organ-Donation-Transplant-Chain-master/Complete Project/client/node_modules/ipfs-api/src/utils/tar-stream-to-objects.js"],"names":["pump","require","tar","ReadableStream","Readable","ObjectsStreams","constructor","options","opts","Object","assign","objectMode","_read","TarStreamToObjects","inputStream","callback","outputStream","extractStream","extract","on","header","stream","next","type","push","path","name","content","resume","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,GAAG,GAAGD,OAAO,CAAC,YAAD,CAAnB;;AACA,MAAME,cAAc,GAAGF,OAAO,CAAC,iBAAD,CAAP,CAA2BG,QAAlD;;AAEA,MAAMC,cAAN,SAA6BF,cAA7B,CAA4C;AAC1CG,EAAAA,WAAW,CAAEC,OAAF,EAAW;AACpB,UAAMC,IAAI,GAAGC,MAAM,CAACC,MAAP,CAAcH,OAAO,IAAI,EAAzB,EAA6B;AAAEI,MAAAA,UAAU,EAAE;AAAd,KAA7B,CAAb;AACA,UAAMH,IAAN;AACD;;AAEDI,EAAAA,KAAK,GAAI,CAAE;;AAN+B;AAS5C;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,kBAAkB,GAAG,CAACC,WAAD,EAAcC,QAAd,KAA2B;AACpD,MAAIC,YAAY,GAAG,IAAIX,cAAJ,EAAnB;AACA,MAAIY,aAAa,GAAGf,GAAG,CAACgB,OAAJ,EAApB;AAEAD,EAAAA,aAAa,CACVE,EADH,CACM,OADN,EACe,CAACC,MAAD,EAASC,MAAT,EAAiBC,IAAjB,KAA0B;AACrCD,IAAAA,MAAM,CAACF,EAAP,CAAU,KAAV,EAAiBG,IAAjB;;AAEA,QAAIF,MAAM,CAACG,IAAP,KAAgB,WAApB,EAAiC;AAC/BP,MAAAA,YAAY,CAACQ,IAAb,CAAkB;AAChBC,QAAAA,IAAI,EAAEL,MAAM,CAACM,IADG;AAEhBC,QAAAA,OAAO,EAAEN;AAFO,OAAlB;AAID,KALD,MAKO;AACLL,MAAAA,YAAY,CAACQ,IAAb,CAAkB;AAChBC,QAAAA,IAAI,EAAEL,MAAM,CAACM;AADG,OAAlB;AAGAL,MAAAA,MAAM,CAACO,MAAP;AACD;AACF,GAfH,EAgBGT,EAhBH,CAgBM,QAhBN,EAgBgB,MAAMH,YAAY,CAACQ,IAAb,CAAkB,IAAlB,CAhBtB;AAkBAxB,EAAAA,IAAI,CAACc,WAAD,EAAcG,aAAd,CAAJ;AACAF,EAAAA,QAAQ,CAAC,IAAD,EAAOC,YAAP,CAAR;AACD,CAxBD;;AA0BAa,MAAM,CAACC,OAAP,GAAiBjB,kBAAjB","sourcesContent":["'use strict'\n\nconst pump = require('pump')\nconst tar = require('tar-stream')\nconst ReadableStream = require('readable-stream').Readable\n\nclass ObjectsStreams extends ReadableStream {\n  constructor (options) {\n    const opts = Object.assign(options || {}, { objectMode: true })\n    super(opts)\n  }\n\n  _read () {}\n}\n\n/*\n  Transform a tar stream into a stream of objects:\n\n  Output format:\n  { path: 'string', content: Stream<Readable> }\n*/\nconst TarStreamToObjects = (inputStream, callback) => {\n  let outputStream = new ObjectsStreams()\n  let extractStream = tar.extract()\n\n  extractStream\n    .on('entry', (header, stream, next) => {\n      stream.on('end', next)\n\n      if (header.type !== 'directory') {\n        outputStream.push({\n          path: header.name,\n          content: stream\n        })\n      } else {\n        outputStream.push({\n          path: header.name\n        })\n        stream.resume()\n      }\n    })\n    .on('finish', () => outputStream.push(null))\n\n  pump(inputStream, extractStream)\n  callback(null, outputStream)\n}\n\nmodule.exports = TarStreamToObjects\n"]},"metadata":{},"sourceType":"script"}