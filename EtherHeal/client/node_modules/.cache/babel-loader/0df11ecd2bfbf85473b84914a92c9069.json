{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\n\nconst assert = require('assert');\n\nconst withIs = require('class-is'); // Link represents an IPFS Merkle DAG Link between Nodes.\n\n\nclass DAGLink {\n  constructor(name, size, multihash) {\n    assert(multihash, 'A link requires a multihash to point to'); // assert(size, 'A link requires a size')\n    //  note - links should include size, but this assert is disabled\n    //  for now to maintain consistency with go-ipfs pinset\n\n    this._name = name || '';\n    this._size = size;\n    this._cid = new CID(multihash);\n  }\n\n  toString() {\n    return `DAGLink <${this._cid.toBaseEncodedString()} - name: \"${this.name}\", size: ${this.size}>`;\n  }\n\n  toJSON() {\n    if (!this._json) {\n      this._json = Object.freeze({\n        name: this.name,\n        size: this.size,\n        multihash: this._cid.toBaseEncodedString()\n      });\n    }\n\n    return Object.assign({}, this._json);\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  set name(name) {\n    throw new Error(\"Can't set property: 'name' is immutable\");\n  }\n\n  get size() {\n    return this._size;\n  }\n\n  set size(size) {\n    throw new Error(\"Can't set property: 'size' is immutable\");\n  }\n\n  get multihash() {\n    return this._cid.buffer;\n  }\n\n  set multihash(multihash) {\n    throw new Error(\"Can't set property: 'multihash' is immutable\");\n  }\n\n  get cid() {\n    return this._cid;\n  }\n\n  set cid(cid) {\n    throw new Error(\"Can't set property: 'cid' is immutable\");\n  }\n\n}\n\nexports = module.exports = withIs(DAGLink, {\n  className: 'DAGLink',\n  symbolName: '@ipld/js-ipld-dag-pb/daglink'\n});\nexports.create = require('./create');\nexports.util = require('./util');","map":{"version":3,"sources":["Z:/Projects/EtherealOrgan/Complete Project/client/node_modules/ipld-dag-pb/src/dag-link/index.js"],"names":["CID","require","assert","withIs","DAGLink","constructor","name","size","multihash","_name","_size","_cid","toString","toBaseEncodedString","toJSON","_json","Object","freeze","assign","Error","buffer","cid","exports","module","className","symbolName","create","util"],"mappings":"AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAME,MAAM,GAAGF,OAAO,CAAC,UAAD,CAAtB,C,CAEA;;;AACA,MAAMG,OAAN,CAAc;AACZC,EAAAA,WAAW,CAAEC,IAAF,EAAQC,IAAR,EAAcC,SAAd,EAAyB;AAClCN,IAAAA,MAAM,CAACM,SAAD,EAAY,yCAAZ,CAAN,CADkC,CAElC;AACA;AACA;;AAEA,SAAKC,KAAL,GAAaH,IAAI,IAAI,EAArB;AACA,SAAKI,KAAL,GAAaH,IAAb;AACA,SAAKI,IAAL,GAAY,IAAIX,GAAJ,CAAQQ,SAAR,CAAZ;AACD;;AAEDI,EAAAA,QAAQ,GAAI;AACV,WAAQ,YAAW,KAAKD,IAAL,CAAUE,mBAAV,EAAgC,aAAY,KAAKP,IAAK,YAAW,KAAKC,IAAK,GAA9F;AACD;;AAEDO,EAAAA,MAAM,GAAI;AACR,QAAI,CAAC,KAAKC,KAAV,EAAiB;AACf,WAAKA,KAAL,GAAaC,MAAM,CAACC,MAAP,CAAc;AACzBX,QAAAA,IAAI,EAAE,KAAKA,IADc;AAEzBC,QAAAA,IAAI,EAAE,KAAKA,IAFc;AAGzBC,QAAAA,SAAS,EAAE,KAAKG,IAAL,CAAUE,mBAAV;AAHc,OAAd,CAAb;AAKD;;AAED,WAAOG,MAAM,CAACE,MAAP,CAAc,EAAd,EAAkB,KAAKH,KAAvB,CAAP;AACD;;AAED,MAAIT,IAAJ,GAAY;AACV,WAAO,KAAKG,KAAZ;AACD;;AAED,MAAIH,IAAJ,CAAUA,IAAV,EAAgB;AACd,UAAM,IAAIa,KAAJ,CAAU,yCAAV,CAAN;AACD;;AAED,MAAIZ,IAAJ,GAAY;AACV,WAAO,KAAKG,KAAZ;AACD;;AAED,MAAIH,IAAJ,CAAUA,IAAV,EAAgB;AACd,UAAM,IAAIY,KAAJ,CAAU,yCAAV,CAAN;AACD;;AAED,MAAIX,SAAJ,GAAiB;AACf,WAAO,KAAKG,IAAL,CAAUS,MAAjB;AACD;;AAED,MAAIZ,SAAJ,CAAeA,SAAf,EAA0B;AACxB,UAAM,IAAIW,KAAJ,CAAU,8CAAV,CAAN;AACD;;AAED,MAAIE,GAAJ,GAAW;AACT,WAAO,KAAKV,IAAZ;AACD;;AAED,MAAIU,GAAJ,CAASA,GAAT,EAAc;AACZ,UAAM,IAAIF,KAAJ,CAAU,wCAAV,CAAN;AACD;;AA1DW;;AA6DdG,OAAO,GAAGC,MAAM,CAACD,OAAP,GAAiBnB,MAAM,CAACC,OAAD,EAAU;AAAEoB,EAAAA,SAAS,EAAE,SAAb;AAAwBC,EAAAA,UAAU,EAAE;AAApC,CAAV,CAAjC;AACAH,OAAO,CAACI,MAAR,GAAiBzB,OAAO,CAAC,UAAD,CAAxB;AACAqB,OAAO,CAACK,IAAR,GAAe1B,OAAO,CAAC,QAAD,CAAtB","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst assert = require('assert')\nconst withIs = require('class-is')\n\n// Link represents an IPFS Merkle DAG Link between Nodes.\nclass DAGLink {\n  constructor (name, size, multihash) {\n    assert(multihash, 'A link requires a multihash to point to')\n    // assert(size, 'A link requires a size')\n    //  note - links should include size, but this assert is disabled\n    //  for now to maintain consistency with go-ipfs pinset\n\n    this._name = name || ''\n    this._size = size\n    this._cid = new CID(multihash)\n  }\n\n  toString () {\n    return `DAGLink <${this._cid.toBaseEncodedString()} - name: \"${this.name}\", size: ${this.size}>`\n  }\n\n  toJSON () {\n    if (!this._json) {\n      this._json = Object.freeze({\n        name: this.name,\n        size: this.size,\n        multihash: this._cid.toBaseEncodedString()\n      })\n    }\n\n    return Object.assign({}, this._json)\n  }\n\n  get name () {\n    return this._name\n  }\n\n  set name (name) {\n    throw new Error(\"Can't set property: 'name' is immutable\")\n  }\n\n  get size () {\n    return this._size\n  }\n\n  set size (size) {\n    throw new Error(\"Can't set property: 'size' is immutable\")\n  }\n\n  get multihash () {\n    return this._cid.buffer\n  }\n\n  set multihash (multihash) {\n    throw new Error(\"Can't set property: 'multihash' is immutable\")\n  }\n\n  get cid () {\n    return this._cid\n  }\n\n  set cid (cid) {\n    throw new Error(\"Can't set property: 'cid' is immutable\")\n  }\n}\n\nexports = module.exports = withIs(DAGLink, { className: 'DAGLink', symbolName: '@ipld/js-ipld-dag-pb/daglink' })\nexports.create = require('./create')\nexports.util = require('./util')\n"]},"metadata":{},"sourceType":"script"}