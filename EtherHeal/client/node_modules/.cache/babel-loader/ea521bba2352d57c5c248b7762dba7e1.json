{"ast":null,"code":"'use strict';\n\nconst multihashing = require('multihashing-async');\n\nconst sort = require('stable');\n\nconst dagPBUtil = require('../util.js');\n\nconst serialize = dagPBUtil.serialize;\n\nconst dagNodeUtil = require('./util.js');\n\nconst linkSort = dagNodeUtil.linkSort;\n\nconst DAGNode = require('./index.js');\n\nconst DAGLink = require('../dag-link');\n\nfunction create(data, dagLinks, hashAlg, callback) {\n  if (typeof data === 'function') {\n    callback = data;\n    data = undefined;\n  } else if (typeof data === 'string') {\n    data = Buffer.from(data);\n  }\n\n  if (typeof dagLinks === 'function') {\n    callback = dagLinks;\n    dagLinks = [];\n  }\n\n  if (typeof hashAlg === 'function') {\n    callback = hashAlg;\n    hashAlg = undefined;\n  }\n\n  if (!Buffer.isBuffer(data)) {\n    return callback(new Error('Passed \\'data\\' is not a buffer or a string!'));\n  }\n\n  if (!hashAlg) {\n    hashAlg = 'sha2-256';\n  }\n\n  const links = dagLinks.map(link => {\n    return DAGLink.isDAGLink(link) ? link : DAGLink.util.createDagLinkFromB58EncodedHash(link);\n  });\n  const sortedLinks = sort(links, linkSort);\n  serialize({\n    data: data,\n    links: sortedLinks\n  }, (err, serialized) => {\n    if (err) {\n      return callback(err);\n    }\n\n    multihashing(serialized, hashAlg, (err, multihash) => {\n      if (err) {\n        return callback(err);\n      }\n\n      const dagNode = new DAGNode(data, sortedLinks, serialized, multihash);\n      callback(null, dagNode);\n    });\n  });\n}\n\nmodule.exports = create;","map":{"version":3,"sources":["Z:/Projects/Rakuten Hack/EtherealHeal/Complete Project/client/node_modules/ipld-dag-pb/src/dag-node/create.js"],"names":["multihashing","require","sort","dagPBUtil","serialize","dagNodeUtil","linkSort","DAGNode","DAGLink","create","data","dagLinks","hashAlg","callback","undefined","Buffer","from","isBuffer","Error","links","map","link","isDAGLink","util","createDagLinkFromB58EncodedHash","sortedLinks","err","serialized","multihash","dagNode","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,YAAY,GAAGC,OAAO,CAAC,oBAAD,CAA5B;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,QAAD,CAApB;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,YAAD,CAAzB;;AACA,MAAMG,SAAS,GAAGD,SAAS,CAACC,SAA5B;;AACA,MAAMC,WAAW,GAAGJ,OAAO,CAAC,WAAD,CAA3B;;AACA,MAAMK,QAAQ,GAAGD,WAAW,CAACC,QAA7B;;AACA,MAAMC,OAAO,GAAGN,OAAO,CAAC,YAAD,CAAvB;;AACA,MAAMO,OAAO,GAAGP,OAAO,CAAC,aAAD,CAAvB;;AAEA,SAASQ,MAAT,CAAiBC,IAAjB,EAAuBC,QAAvB,EAAiCC,OAAjC,EAA0CC,QAA1C,EAAoD;AAClD,MAAI,OAAOH,IAAP,KAAgB,UAApB,EAAgC;AAC9BG,IAAAA,QAAQ,GAAGH,IAAX;AACAA,IAAAA,IAAI,GAAGI,SAAP;AACD,GAHD,MAGO,IAAI,OAAOJ,IAAP,KAAgB,QAApB,EAA8B;AACnCA,IAAAA,IAAI,GAAGK,MAAM,CAACC,IAAP,CAAYN,IAAZ,CAAP;AACD;;AACD,MAAI,OAAOC,QAAP,KAAoB,UAAxB,EAAoC;AAClCE,IAAAA,QAAQ,GAAGF,QAAX;AACAA,IAAAA,QAAQ,GAAG,EAAX;AACD;;AACD,MAAI,OAAOC,OAAP,KAAmB,UAAvB,EAAmC;AACjCC,IAAAA,QAAQ,GAAGD,OAAX;AACAA,IAAAA,OAAO,GAAGE,SAAV;AACD;;AAED,MAAI,CAACC,MAAM,CAACE,QAAP,CAAgBP,IAAhB,CAAL,EAA4B;AAC1B,WAAOG,QAAQ,CAAC,IAAIK,KAAJ,CAAU,8CAAV,CAAD,CAAf;AACD;;AAED,MAAI,CAACN,OAAL,EAAc;AACZA,IAAAA,OAAO,GAAG,UAAV;AACD;;AAED,QAAMO,KAAK,GAAGR,QAAQ,CAACS,GAAT,CAAcC,IAAD,IAAU;AACnC,WAAOb,OAAO,CAACc,SAAR,CAAkBD,IAAlB,IAA0BA,IAA1B,GAAiCb,OAAO,CAACe,IAAR,CAAaC,+BAAb,CAA6CH,IAA7C,CAAxC;AACD,GAFa,CAAd;AAGA,QAAMI,WAAW,GAAGvB,IAAI,CAACiB,KAAD,EAAQb,QAAR,CAAxB;AAEAF,EAAAA,SAAS,CAAC;AACRM,IAAAA,IAAI,EAAEA,IADE;AAERS,IAAAA,KAAK,EAAEM;AAFC,GAAD,EAGN,CAACC,GAAD,EAAMC,UAAN,KAAqB;AACtB,QAAID,GAAJ,EAAS;AACP,aAAOb,QAAQ,CAACa,GAAD,CAAf;AACD;;AACD1B,IAAAA,YAAY,CAAC2B,UAAD,EAAaf,OAAb,EAAsB,CAACc,GAAD,EAAME,SAAN,KAAoB;AACpD,UAAIF,GAAJ,EAAS;AACP,eAAOb,QAAQ,CAACa,GAAD,CAAf;AACD;;AACD,YAAMG,OAAO,GAAG,IAAItB,OAAJ,CAAYG,IAAZ,EAAkBe,WAAlB,EAA+BE,UAA/B,EAA2CC,SAA3C,CAAhB;AACAf,MAAAA,QAAQ,CAAC,IAAD,EAAOgB,OAAP,CAAR;AACD,KANW,CAAZ;AAOD,GAdQ,CAAT;AAeD;;AAEDC,MAAM,CAACC,OAAP,GAAiBtB,MAAjB","sourcesContent":["'use strict'\n\nconst multihashing = require('multihashing-async')\nconst sort = require('stable')\nconst dagPBUtil = require('../util.js')\nconst serialize = dagPBUtil.serialize\nconst dagNodeUtil = require('./util.js')\nconst linkSort = dagNodeUtil.linkSort\nconst DAGNode = require('./index.js')\nconst DAGLink = require('../dag-link')\n\nfunction create (data, dagLinks, hashAlg, callback) {\n  if (typeof data === 'function') {\n    callback = data\n    data = undefined\n  } else if (typeof data === 'string') {\n    data = Buffer.from(data)\n  }\n  if (typeof dagLinks === 'function') {\n    callback = dagLinks\n    dagLinks = []\n  }\n  if (typeof hashAlg === 'function') {\n    callback = hashAlg\n    hashAlg = undefined\n  }\n\n  if (!Buffer.isBuffer(data)) {\n    return callback(new Error('Passed \\'data\\' is not a buffer or a string!'))\n  }\n\n  if (!hashAlg) {\n    hashAlg = 'sha2-256'\n  }\n\n  const links = dagLinks.map((link) => {\n    return DAGLink.isDAGLink(link) ? link : DAGLink.util.createDagLinkFromB58EncodedHash(link)\n  })\n  const sortedLinks = sort(links, linkSort)\n\n  serialize({\n    data: data,\n    links: sortedLinks\n  }, (err, serialized) => {\n    if (err) {\n      return callback(err)\n    }\n    multihashing(serialized, hashAlg, (err, multihash) => {\n      if (err) {\n        return callback(err)\n      }\n      const dagNode = new DAGNode(data, sortedLinks, serialized, multihash)\n      callback(null, dagNode)\n    })\n  })\n}\n\nmodule.exports = create\n"]},"metadata":{},"sourceType":"script"}