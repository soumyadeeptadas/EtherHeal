{"ast":null,"code":"'use strict';\n\nconst dagPB = require('ipld-dag-pb');\n\nconst dagCBOR = require('ipld-dag-cbor');\n\nconst promisify = require('promisify-es6');\n\nconst CID = require('cids');\n\nconst multihash = require('multihashes');\n\nconst SendOneFile = require('../utils/send-one-file');\n\nmodule.exports = send => {\n  const sendOneFile = SendOneFile(send, 'dag/put');\n  return promisify((dagNode, options, callback) => {\n    if (typeof options === 'function') {\n      callback = options;\n    }\n\n    options = options || {};\n\n    if (options.hash) {\n      options.hashAlg = options.hash;\n      delete options.hash;\n    }\n\n    if (options.cid && (options.format || options.hashAlg)) {\n      return callback(new Error('Can\\'t put dag node. Please provide either `cid` OR `format` and `hash` options.'));\n    } else if (options.format && !options.hashAlg || !options.format && options.hashAlg) {\n      return callback(new Error('Can\\'t put dag node. Please provide `format` AND `hash` options.'));\n    }\n\n    if (options.cid) {\n      let cid;\n\n      try {\n        cid = new CID(options.cid);\n      } catch (err) {\n        return callback(err);\n      }\n\n      options.format = cid.codec;\n      options.hashAlg = multihash.decode(cid.multihash).name;\n      delete options.cid;\n    }\n\n    const optionDefaults = {\n      format: 'dag-cbor',\n      hashAlg: 'sha2-256',\n      inputEnc: 'raw'\n    };\n    options = Object.assign(optionDefaults, options);\n\n    if (options.format === 'dag-cbor') {\n      dagCBOR.util.serialize(dagNode, finalize);\n    } else if (options.format === 'dag-pb') {\n      dagPB.util.serialize(dagNode, finalize);\n    } else {\n      // FIXME Hopefully already serialized...can we use IPLD to serialise instead?\n      finalize(null, dagNode);\n    }\n\n    function finalize(err, serialized) {\n      if (err) {\n        return callback(err);\n      }\n\n      const sendOptions = {\n        qs: {\n          hash: options.hashAlg,\n          format: options.format,\n          'input-enc': options.inputEnc\n        }\n      };\n      sendOneFile(serialized, sendOptions, (err, result) => {\n        if (err) {\n          return callback(err);\n        }\n\n        if (result['Cid']) {\n          return callback(null, new CID(result['Cid']['/']));\n        } else {\n          return callback(result);\n        }\n      });\n    }\n  });\n};","map":{"version":3,"sources":["z:/Projects/EtherealOrgan/Complete Project/client/node_modules/ipfs-api/src/dag/put.js"],"names":["dagPB","require","dagCBOR","promisify","CID","multihash","SendOneFile","module","exports","send","sendOneFile","dagNode","options","callback","hash","hashAlg","cid","format","Error","err","codec","decode","name","optionDefaults","inputEnc","Object","assign","util","serialize","finalize","serialized","sendOptions","qs","result"],"mappings":"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","sourcesContent":["'use strict'\n\nconst dagPB = require('ipld-dag-pb')\nconst dagCBOR = require('ipld-dag-cbor')\nconst promisify = require('promisify-es6')\nconst CID = require('cids')\nconst multihash = require('multihashes')\nconst SendOneFile = require('../utils/send-one-file')\n\nmodule.exports = (send) => {\n  const sendOneFile = SendOneFile(send, 'dag/put')\n\n  return promisify((dagNode, options, callback) => {\n    if (typeof options === 'function') {\n      callback = options\n    }\n\n    options = options || {}\n\n    if (options.hash) {\n      options.hashAlg = options.hash\n      delete options.hash\n    }\n\n    if (options.cid && (options.format || options.hashAlg)) {\n      return callback(new Error('Can\\'t put dag node. Please provide either `cid` OR `format` and `hash` options.'))\n    } else if ((options.format && !options.hashAlg) || (!options.format && options.hashAlg)) {\n      return callback(new Error('Can\\'t put dag node. Please provide `format` AND `hash` options.'))\n    }\n\n    if (options.cid) {\n      let cid\n\n      try {\n        cid = new CID(options.cid)\n      } catch (err) {\n        return callback(err)\n      }\n\n      options.format = cid.codec\n      options.hashAlg = multihash.decode(cid.multihash).name\n      delete options.cid\n    }\n\n    const optionDefaults = {\n      format: 'dag-cbor',\n      hashAlg: 'sha2-256',\n      inputEnc: 'raw'\n    }\n\n    options = Object.assign(optionDefaults, options)\n\n    if (options.format === 'dag-cbor') {\n      dagCBOR.util.serialize(dagNode, finalize)\n    } else if (options.format === 'dag-pb') {\n      dagPB.util.serialize(dagNode, finalize)\n    } else {\n      // FIXME Hopefully already serialized...can we use IPLD to serialise instead?\n      finalize(null, dagNode)\n    }\n\n    function finalize (err, serialized) {\n      if (err) { return callback(err) }\n      const sendOptions = {\n        qs: {\n          hash: options.hashAlg,\n          format: options.format,\n          'input-enc': options.inputEnc\n        }\n      }\n      sendOneFile(serialized, sendOptions, (err, result) => {\n        if (err) {\n          return callback(err)\n        }\n        if (result['Cid']) {\n          return callback(null, new CID(result['Cid']['/']))\n        } else {\n          return callback(result)\n        }\n      })\n    }\n  })\n}\n"]},"metadata":{},"sourceType":"script"}