{"ast":null,"code":"'use strict';\n\nvar common = require('../common.js');\n\nvar v6 = require('./constants.js');\n/**\n * Returns true if the address is valid, false otherwise\n * @memberof Address6\n * @instance\n * @returns {boolean}\n */\n\n\nexports.isValid = function () {\n  return this.valid;\n};\n/**\n * Returns true if the given address is in the subnet of the current address\n * @memberof Address6\n * @instance\n * @returns {boolean}\n */\n\n\nexports.isInSubnet = common.isInSubnet;\n/**\n * Returns true if the address is correct, false otherwise\n * @memberof Address6\n * @instance\n * @returns {boolean}\n */\n\nexports.isCorrect = common.isCorrect(v6.BITS);\n/**\n * Returns true if the address is in the canonical form, false otherwise\n * @memberof Address6\n * @instance\n * @returns {boolean}\n */\n\nexports.isCanonical = common.falseIfInvalid(function () {\n  return this.addressMinusSuffix === this.canonicalForm();\n});\n/**\n * Returns true if the address is a link local address, false otherwise\n * @memberof Address6\n * @instance\n * @returns {boolean}\n */\n\nexports.isLinkLocal = common.falseIfInvalid(function () {\n  // Zeroes are required, i.e. we can't check isInSubnet with 'fe80::/10'\n  if (this.getBitsBase2(0, 64) === '1111111010000000000000000000000000000000000000000000000000000000') {\n    return true;\n  }\n\n  return false;\n});\n/**\n * Returns true if the address is a multicast address, false otherwise\n * @memberof Address6\n * @instance\n * @returns {boolean}\n */\n\nexports.isMulticast = common.falseIfInvalid(function () {\n  return this.getType() === 'Multicast';\n});\n/**\n * Returns true if the address is a v4-in-v6 address, false otherwise\n * @memberof Address6\n * @instance\n * @returns {boolean}\n */\n\nexports.is4 = common.falseIfInvalid(function () {\n  return this.v4;\n});\n/**\n * Returns true if the address is a Teredo address, false otherwise\n * @memberof Address6\n * @instance\n * @returns {boolean}\n */\n\nexports.isTeredo = common.falseIfInvalid(function () {\n  return this.isInSubnet(new this.constructor('2001::/32'));\n});\n/**\n * Returns true if the address is a 6to4 address, false otherwise\n * @memberof Address6\n * @instance\n * @returns {boolean}\n */\n\nexports.is6to4 = common.falseIfInvalid(function () {\n  return this.isInSubnet(new this.constructor('2002::/16'));\n});\n/**\n * Returns true if the address is a loopback address, false otherwise\n * @memberof Address6\n * @instance\n * @returns {boolean}\n */\n\nexports.isLoopback = common.falseIfInvalid(function () {\n  return this.getType() === 'Loopback';\n});","map":{"version":3,"sources":["z:/Projects/EtherealOrgan/Complete Project/client/node_modules/ip-address/lib/v6/attributes.js"],"names":["common","require","v6","exports","isValid","valid","isInSubnet","isCorrect","BITS","isCanonical","falseIfInvalid","addressMinusSuffix","canonicalForm","isLinkLocal","getBitsBase2","isMulticast","getType","is4","v4","isTeredo","constructor","is6to4","isLoopback"],"mappings":"AAAA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,cAAD,CAApB;;AACA,IAAIC,EAAE,GAAGD,OAAO,CAAC,gBAAD,CAAhB;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACAE,OAAO,CAACC,OAAR,GAAkB,YAAY;AAC5B,SAAO,KAAKC,KAAZ;AACD,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;;;AACAF,OAAO,CAACG,UAAR,GAAqBN,MAAM,CAACM,UAA5B;AAEA;AACA;AACA;AACA;AACA;AACA;;AACAH,OAAO,CAACI,SAAR,GAAoBP,MAAM,CAACO,SAAP,CAAiBL,EAAE,CAACM,IAApB,CAApB;AAEA;AACA;AACA;AACA;AACA;AACA;;AACAL,OAAO,CAACM,WAAR,GAAsBT,MAAM,CAACU,cAAP,CAAsB,YAAY;AACtD,SAAO,KAAKC,kBAAL,KAA4B,KAAKC,aAAL,EAAnC;AACD,CAFqB,CAAtB;AAIA;AACA;AACA;AACA;AACA;AACA;;AACAT,OAAO,CAACU,WAAR,GAAsBb,MAAM,CAACU,cAAP,CAAsB,YAAY;AACtD;AACA,MAAI,KAAKI,YAAL,CAAkB,CAAlB,EAAqB,EAArB,MACF,kEADF,EACsE;AACpE,WAAO,IAAP;AACD;;AAED,SAAO,KAAP;AACD,CARqB,CAAtB;AAUA;AACA;AACA;AACA;AACA;AACA;;AACAX,OAAO,CAACY,WAAR,GAAsBf,MAAM,CAACU,cAAP,CAAsB,YAAY;AACtD,SAAO,KAAKM,OAAL,OAAmB,WAA1B;AACD,CAFqB,CAAtB;AAIA;AACA;AACA;AACA;AACA;AACA;;AACAb,OAAO,CAACc,GAAR,GAAcjB,MAAM,CAACU,cAAP,CAAsB,YAAY;AAC9C,SAAO,KAAKQ,EAAZ;AACD,CAFa,CAAd;AAIA;AACA;AACA;AACA;AACA;AACA;;AACAf,OAAO,CAACgB,QAAR,GAAmBnB,MAAM,CAACU,cAAP,CAAsB,YAAY;AACnD,SAAO,KAAKJ,UAAL,CAAgB,IAAI,KAAKc,WAAT,CAAqB,WAArB,CAAhB,CAAP;AACD,CAFkB,CAAnB;AAIA;AACA;AACA;AACA;AACA;AACA;;AACAjB,OAAO,CAACkB,MAAR,GAAiBrB,MAAM,CAACU,cAAP,CAAsB,YAAY;AACjD,SAAO,KAAKJ,UAAL,CAAgB,IAAI,KAAKc,WAAT,CAAqB,WAArB,CAAhB,CAAP;AACD,CAFgB,CAAjB;AAIA;AACA;AACA;AACA;AACA;AACA;;AACAjB,OAAO,CAACmB,UAAR,GAAqBtB,MAAM,CAACU,cAAP,CAAsB,YAAY;AACrD,SAAO,KAAKM,OAAL,OAAmB,UAA1B;AACD,CAFoB,CAArB","sourcesContent":["'use strict';\n\nvar common = require('../common.js');\nvar v6 = require('./constants.js');\n\n/**\n * Returns true if the address is valid, false otherwise\n * @memberof Address6\n * @instance\n * @returns {boolean}\n */\nexports.isValid = function () {\n  return this.valid;\n};\n\n/**\n * Returns true if the given address is in the subnet of the current address\n * @memberof Address6\n * @instance\n * @returns {boolean}\n */\nexports.isInSubnet = common.isInSubnet;\n\n/**\n * Returns true if the address is correct, false otherwise\n * @memberof Address6\n * @instance\n * @returns {boolean}\n */\nexports.isCorrect = common.isCorrect(v6.BITS);\n\n/**\n * Returns true if the address is in the canonical form, false otherwise\n * @memberof Address6\n * @instance\n * @returns {boolean}\n */\nexports.isCanonical = common.falseIfInvalid(function () {\n  return this.addressMinusSuffix === this.canonicalForm();\n});\n\n/**\n * Returns true if the address is a link local address, false otherwise\n * @memberof Address6\n * @instance\n * @returns {boolean}\n */\nexports.isLinkLocal = common.falseIfInvalid(function () {\n  // Zeroes are required, i.e. we can't check isInSubnet with 'fe80::/10'\n  if (this.getBitsBase2(0, 64) ===\n    '1111111010000000000000000000000000000000000000000000000000000000') {\n    return true;\n  }\n\n  return false;\n});\n\n/**\n * Returns true if the address is a multicast address, false otherwise\n * @memberof Address6\n * @instance\n * @returns {boolean}\n */\nexports.isMulticast = common.falseIfInvalid(function () {\n  return this.getType() === 'Multicast';\n});\n\n/**\n * Returns true if the address is a v4-in-v6 address, false otherwise\n * @memberof Address6\n * @instance\n * @returns {boolean}\n */\nexports.is4 = common.falseIfInvalid(function () {\n  return this.v4;\n});\n\n/**\n * Returns true if the address is a Teredo address, false otherwise\n * @memberof Address6\n * @instance\n * @returns {boolean}\n */\nexports.isTeredo = common.falseIfInvalid(function () {\n  return this.isInSubnet(new this.constructor('2001::/32'));\n});\n\n/**\n * Returns true if the address is a 6to4 address, false otherwise\n * @memberof Address6\n * @instance\n * @returns {boolean}\n */\nexports.is6to4 = common.falseIfInvalid(function () {\n  return this.isInSubnet(new this.constructor('2002::/16'));\n});\n\n/**\n * Returns true if the address is a loopback address, false otherwise\n * @memberof Address6\n * @instance\n * @returns {boolean}\n */\nexports.isLoopback = common.falseIfInvalid(function () {\n  return this.getType() === 'Loopback';\n});\n"]},"metadata":{},"sourceType":"script"}