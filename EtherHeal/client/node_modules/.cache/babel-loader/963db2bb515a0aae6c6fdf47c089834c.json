{"ast":null,"code":"'use strict';\n\nconst setImmediate = require('async/setImmediate');\n\nexports.toCallback = doWork => {\n  return function (input, callback) {\n    const done = (err, res) => setImmediate(() => {\n      callback(err, res);\n    });\n\n    let res;\n\n    try {\n      res = doWork(input);\n    } catch (err) {\n      done(err);\n      return;\n    }\n\n    done(null, res);\n  };\n};\n\nexports.toBuf = (doWork, other) => input => {\n  let result = doWork(input, other);\n  return Buffer.from(result, 'hex');\n};\n\nexports.fromString = (doWork, other) => _input => {\n  const input = Buffer.isBuffer(_input) ? _input.toString() : _input;\n  return doWork(input, other);\n};\n\nexports.fromNumberTo32BitBuf = (doWork, other) => input => {\n  let number = doWork(input, other);\n  const bytes = new Array(4);\n\n  for (let i = 0; i < 4; i++) {\n    bytes[i] = number & 0xff;\n    number = number >> 8;\n  }\n\n  return Buffer.from(bytes);\n};","map":{"version":3,"sources":["Z:/Projects/Rakuten Hack/EtherealHeal/Complete Project/client/node_modules/peer-info/node_modules/multihashing-async/src/utils.js"],"names":["setImmediate","require","exports","toCallback","doWork","input","callback","done","err","res","toBuf","other","result","Buffer","from","fromString","_input","isBuffer","toString","fromNumberTo32BitBuf","number","bytes","Array","i"],"mappings":"AAAA;;AAEA,MAAMA,YAAY,GAAGC,OAAO,CAAC,oBAAD,CAA5B;;AAEAC,OAAO,CAACC,UAAR,GAAsBC,MAAD,IAAY;AAC/B,SAAO,UAAUC,KAAV,EAAiBC,QAAjB,EAA2B;AAChC,UAAMC,IAAI,GAAG,CAACC,GAAD,EAAMC,GAAN,KAAcT,YAAY,CAAC,MAAM;AAC5CM,MAAAA,QAAQ,CAACE,GAAD,EAAMC,GAAN,CAAR;AACD,KAFsC,CAAvC;;AAIA,QAAIA,GAAJ;;AACA,QAAI;AACFA,MAAAA,GAAG,GAAGL,MAAM,CAACC,KAAD,CAAZ;AACD,KAFD,CAEE,OAAOG,GAAP,EAAY;AACZD,MAAAA,IAAI,CAACC,GAAD,CAAJ;AACA;AACD;;AAEDD,IAAAA,IAAI,CAAC,IAAD,EAAOE,GAAP,CAAJ;AACD,GAdD;AAeD,CAhBD;;AAkBAP,OAAO,CAACQ,KAAR,GAAgB,CAACN,MAAD,EAASO,KAAT,KAAoBN,KAAD,IAAW;AAC5C,MAAIO,MAAM,GAAGR,MAAM,CAACC,KAAD,EAAQM,KAAR,CAAnB;AACA,SAAOE,MAAM,CAACC,IAAP,CAAYF,MAAZ,EAAoB,KAApB,CAAP;AACD,CAHD;;AAKAV,OAAO,CAACa,UAAR,GAAqB,CAACX,MAAD,EAASO,KAAT,KAAoBK,MAAD,IAAY;AAClD,QAAMX,KAAK,GAAGQ,MAAM,CAACI,QAAP,CAAgBD,MAAhB,IAA0BA,MAAM,CAACE,QAAP,EAA1B,GAA8CF,MAA5D;AACA,SAAOZ,MAAM,CAACC,KAAD,EAAQM,KAAR,CAAb;AACD,CAHD;;AAKAT,OAAO,CAACiB,oBAAR,GAA+B,CAACf,MAAD,EAASO,KAAT,KAAoBN,KAAD,IAAW;AAC3D,MAAIe,MAAM,GAAGhB,MAAM,CAACC,KAAD,EAAQM,KAAR,CAAnB;AACA,QAAMU,KAAK,GAAG,IAAIC,KAAJ,CAAU,CAAV,CAAd;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1BF,IAAAA,KAAK,CAACE,CAAD,CAAL,GAAWH,MAAM,GAAG,IAApB;AACAA,IAAAA,MAAM,GAAGA,MAAM,IAAI,CAAnB;AACD;;AAED,SAAOP,MAAM,CAACC,IAAP,CAAYO,KAAZ,CAAP;AACD,CAVD","sourcesContent":["'use strict'\n\nconst setImmediate = require('async/setImmediate')\n\nexports.toCallback = (doWork) => {\n  return function (input, callback) {\n    const done = (err, res) => setImmediate(() => {\n      callback(err, res)\n    })\n\n    let res\n    try {\n      res = doWork(input)\n    } catch (err) {\n      done(err)\n      return\n    }\n\n    done(null, res)\n  }\n}\n\nexports.toBuf = (doWork, other) => (input) => {\n  let result = doWork(input, other)\n  return Buffer.from(result, 'hex')\n}\n\nexports.fromString = (doWork, other) => (_input) => {\n  const input = Buffer.isBuffer(_input) ? _input.toString() : _input\n  return doWork(input, other)\n}\n\nexports.fromNumberTo32BitBuf = (doWork, other) => (input) => {\n  let number = doWork(input, other)\n  const bytes = new Array(4)\n\n  for (let i = 0; i < 4; i++) {\n    bytes[i] = number & 0xff\n    number = number >> 8\n  }\n\n  return Buffer.from(bytes)\n}\n"]},"metadata":{},"sourceType":"script"}