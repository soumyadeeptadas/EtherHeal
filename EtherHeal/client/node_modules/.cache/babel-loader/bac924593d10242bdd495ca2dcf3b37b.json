{"ast":null,"code":"'use strict';\n\nconst promisify = require('promisify-es6');\n\nconst multiaddr = require('multiaddr');\n\nconst PeerId = require('peer-id');\n\nmodule.exports = send => {\n  return promisify((opts, callback) => {\n    if (typeof opts === 'function') {\n      callback = opts;\n      opts = {};\n    }\n\n    const verbose = opts.v || opts.verbose;\n    send({\n      path: 'swarm/peers',\n      qs: opts\n    }, (err, result) => {\n      if (err) {\n        return callback(err);\n      } // go-ipfs <= 0.4.4\n\n\n      if (result.Strings) {\n        return callback(null, result.Strings.map(p => {\n          const res = {};\n\n          if (verbose) {\n            const parts = p.split(' ');\n            res.addr = multiaddr(parts[0]);\n            res.latency = parts[1];\n          } else {\n            res.addr = multiaddr(p);\n          }\n\n          res.peer = PeerId.createFromB58String(res.addr.decapsulate('ipfs'));\n          return res;\n        }));\n      } // go-ipfs >= 0.4.5\n\n\n      callback(null, (result.Peers || []).map(p => {\n        const res = {\n          addr: multiaddr(p.Addr),\n          peer: PeerId.createFromB58String(p.Peer),\n          muxer: p.Muxer\n        };\n\n        if (p.Latency) {\n          res.latency = p.Latency;\n        }\n\n        if (p.Streams) {\n          res.streams = p.Streams;\n        }\n\n        return res;\n      }));\n    });\n  });\n};","map":{"version":3,"sources":["Z:/Projects/Organ-Donation-Transplant-Chain-master/Complete Project/client/node_modules/ipfs-api/src/swarm/peers.js"],"names":["promisify","require","multiaddr","PeerId","module","exports","send","opts","callback","verbose","v","path","qs","err","result","Strings","map","p","res","parts","split","addr","latency","peer","createFromB58String","decapsulate","Peers","Addr","Peer","muxer","Muxer","Latency","Streams","streams"],"mappings":"AAAA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,eAAD,CAAzB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,WAAD,CAAzB;;AACA,MAAME,MAAM,GAAGF,OAAO,CAAC,SAAD,CAAtB;;AAEAG,MAAM,CAACC,OAAP,GAAkBC,IAAD,IAAU;AACzB,SAAON,SAAS,CAAC,CAACO,IAAD,EAAOC,QAAP,KAAoB;AACnC,QAAI,OAAQD,IAAR,KAAkB,UAAtB,EAAkC;AAChCC,MAAAA,QAAQ,GAAGD,IAAX;AACAA,MAAAA,IAAI,GAAG,EAAP;AACD;;AAED,UAAME,OAAO,GAAGF,IAAI,CAACG,CAAL,IAAUH,IAAI,CAACE,OAA/B;AAEAH,IAAAA,IAAI,CAAC;AACHK,MAAAA,IAAI,EAAE,aADH;AAEHC,MAAAA,EAAE,EAAEL;AAFD,KAAD,EAGD,CAACM,GAAD,EAAMC,MAAN,KAAiB;AAClB,UAAID,GAAJ,EAAS;AACP,eAAOL,QAAQ,CAACK,GAAD,CAAf;AACD,OAHiB,CAKlB;;;AACA,UAAIC,MAAM,CAACC,OAAX,EAAoB;AAClB,eAAOP,QAAQ,CAAC,IAAD,EAAOM,MAAM,CAACC,OAAP,CAAeC,GAAf,CAAoBC,CAAD,IAAO;AAC9C,gBAAMC,GAAG,GAAG,EAAZ;;AAEA,cAAIT,OAAJ,EAAa;AACX,kBAAMU,KAAK,GAAGF,CAAC,CAACG,KAAF,CAAQ,GAAR,CAAd;AACAF,YAAAA,GAAG,CAACG,IAAJ,GAAWnB,SAAS,CAACiB,KAAK,CAAC,CAAD,CAAN,CAApB;AACAD,YAAAA,GAAG,CAACI,OAAJ,GAAcH,KAAK,CAAC,CAAD,CAAnB;AACD,WAJD,MAIO;AACLD,YAAAA,GAAG,CAACG,IAAJ,GAAWnB,SAAS,CAACe,CAAD,CAApB;AACD;;AAEDC,UAAAA,GAAG,CAACK,IAAJ,GAAWpB,MAAM,CAACqB,mBAAP,CACTN,GAAG,CAACG,IAAJ,CAASI,WAAT,CAAqB,MAArB,CADS,CAAX;AAIA,iBAAOP,GAAP;AACD,SAhBqB,CAAP,CAAf;AAiBD,OAxBiB,CA0BlB;;;AACAV,MAAAA,QAAQ,CAAC,IAAD,EAAO,CAACM,MAAM,CAACY,KAAP,IAAgB,EAAjB,EAAqBV,GAArB,CAA0BC,CAAD,IAAO;AAC7C,cAAMC,GAAG,GAAG;AACVG,UAAAA,IAAI,EAAEnB,SAAS,CAACe,CAAC,CAACU,IAAH,CADL;AAEVJ,UAAAA,IAAI,EAAEpB,MAAM,CAACqB,mBAAP,CAA2BP,CAAC,CAACW,IAA7B,CAFI;AAGVC,UAAAA,KAAK,EAAEZ,CAAC,CAACa;AAHC,SAAZ;;AAMA,YAAIb,CAAC,CAACc,OAAN,EAAe;AACbb,UAAAA,GAAG,CAACI,OAAJ,GAAcL,CAAC,CAACc,OAAhB;AACD;;AAED,YAAId,CAAC,CAACe,OAAN,EAAe;AACbd,UAAAA,GAAG,CAACe,OAAJ,GAAchB,CAAC,CAACe,OAAhB;AACD;;AAED,eAAOd,GAAP;AACD,OAhBc,CAAP,CAAR;AAiBD,KA/CG,CAAJ;AAgDD,GAxDe,CAAhB;AAyDD,CA1DD","sourcesContent":["'use strict'\n\nconst promisify = require('promisify-es6')\nconst multiaddr = require('multiaddr')\nconst PeerId = require('peer-id')\n\nmodule.exports = (send) => {\n  return promisify((opts, callback) => {\n    if (typeof (opts) === 'function') {\n      callback = opts\n      opts = {}\n    }\n\n    const verbose = opts.v || opts.verbose\n\n    send({\n      path: 'swarm/peers',\n      qs: opts\n    }, (err, result) => {\n      if (err) {\n        return callback(err)\n      }\n\n      // go-ipfs <= 0.4.4\n      if (result.Strings) {\n        return callback(null, result.Strings.map((p) => {\n          const res = {}\n\n          if (verbose) {\n            const parts = p.split(' ')\n            res.addr = multiaddr(parts[0])\n            res.latency = parts[1]\n          } else {\n            res.addr = multiaddr(p)\n          }\n\n          res.peer = PeerId.createFromB58String(\n            res.addr.decapsulate('ipfs')\n          )\n\n          return res\n        }))\n      }\n\n      // go-ipfs >= 0.4.5\n      callback(null, (result.Peers || []).map((p) => {\n        const res = {\n          addr: multiaddr(p.Addr),\n          peer: PeerId.createFromB58String(p.Peer),\n          muxer: p.Muxer\n        }\n\n        if (p.Latency) {\n          res.latency = p.Latency\n        }\n\n        if (p.Streams) {\n          res.streams = p.Streams\n        }\n\n        return res\n      }))\n    })\n  })\n}\n"]},"metadata":{},"sourceType":"script"}