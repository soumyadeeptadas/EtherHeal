{"ast":null,"code":"'use strict';\n\nvar sprintf = require('sprintf-js').sprintf;\n/**\n * @returns {String} the string with all zeroes contained in a <span>\n */\n\n\nvar spanAllZeroes = exports.spanAllZeroes = function (s) {\n  return s.replace(/(0+)/g, '<span class=\"zero\">$1</span>');\n};\n/**\n * @returns {String} the string with each character contained in a <span>\n */\n\n\nexports.spanAll = function (s, optionalOffset) {\n  if (optionalOffset === undefined) {\n    optionalOffset = 0;\n  }\n\n  var letters = s.split('');\n  return letters.map(function (n, i) {\n    return sprintf('<span class=\"digit value-%s position-%d\">%s</span>', n, i + optionalOffset, spanAllZeroes(n)); // XXX Use #base-2 .value-0 instead?\n  }).join('');\n};\n\nfunction spanLeadingZeroesSimple(group) {\n  return group.replace(/^(0+)/, '<span class=\"zero\">$1</span>');\n}\n/**\n * @returns {String} the string with leading zeroes contained in a <span>\n */\n\n\nexports.spanLeadingZeroes = function (address) {\n  var groups = address.split(':');\n  return groups.map(function (g) {\n    return spanLeadingZeroesSimple(g);\n  }).join(':');\n};\n/**\n * Groups an address\n * @returns {String} a grouped address\n */\n\n\nexports.simpleGroup = function (addressString, offset) {\n  var groups = addressString.split(':');\n\n  if (!offset) {\n    offset = 0;\n  }\n\n  return groups.map(function (g, i) {\n    if (/group-v4/.test(g)) {\n      return g;\n    }\n\n    return sprintf('<span class=\"hover-group group-%d\">%s</span>', i + offset, spanLeadingZeroesSimple(g));\n  }).join(':');\n};","map":{"version":3,"sources":["Z:/Projects/EtherealOrgan/Complete Project/client/node_modules/ip-address/lib/v6/helpers.js"],"names":["sprintf","require","spanAllZeroes","exports","s","replace","spanAll","optionalOffset","undefined","letters","split","map","n","i","join","spanLeadingZeroesSimple","group","spanLeadingZeroes","address","groups","g","simpleGroup","addressString","offset","test"],"mappings":"AAAA;;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,YAAD,CAAP,CAAsBD,OAApC;AAEA;AACA;AACA;;;AACA,IAAIE,aAAa,GAAGC,OAAO,CAACD,aAAR,GAAwB,UAAUE,CAAV,EAAa;AACvD,SAAOA,CAAC,CAACC,OAAF,CAAU,OAAV,EAAmB,8BAAnB,CAAP;AACD,CAFD;AAIA;AACA;AACA;;;AACAF,OAAO,CAACG,OAAR,GAAkB,UAAUF,CAAV,EAAaG,cAAb,EAA6B;AAC7C,MAAIA,cAAc,KAAKC,SAAvB,EAAkC;AAChCD,IAAAA,cAAc,GAAG,CAAjB;AACD;;AAED,MAAIE,OAAO,GAAGL,CAAC,CAACM,KAAF,CAAQ,EAAR,CAAd;AAEA,SAAOD,OAAO,CAACE,GAAR,CAAY,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AACjC,WAAOb,OAAO,CAAC,oDAAD,EAAuDY,CAAvD,EACZC,CAAC,GAAGN,cADQ,EAEZL,aAAa,CAACU,CAAD,CAFD,CAAd,CADiC,CAGZ;AACtB,GAJM,EAIJE,IAJI,CAIC,EAJD,CAAP;AAKD,CAZD;;AAcA,SAASC,uBAAT,CAAiCC,KAAjC,EAAwC;AACtC,SAAOA,KAAK,CAACX,OAAN,CAAc,OAAd,EAAuB,8BAAvB,CAAP;AACD;AAED;AACA;AACA;;;AACAF,OAAO,CAACc,iBAAR,GAA4B,UAAUC,OAAV,EAAmB;AAC7C,MAAIC,MAAM,GAAGD,OAAO,CAACR,KAAR,CAAc,GAAd,CAAb;AAEA,SAAOS,MAAM,CAACR,GAAP,CAAW,UAAUS,CAAV,EAAa;AAC7B,WAAOL,uBAAuB,CAACK,CAAD,CAA9B;AACD,GAFM,EAEJN,IAFI,CAEC,GAFD,CAAP;AAGD,CAND;AAQA;AACA;AACA;AACA;;;AACAX,OAAO,CAACkB,WAAR,GAAsB,UAAUC,aAAV,EAAyBC,MAAzB,EAAiC;AACrD,MAAIJ,MAAM,GAAGG,aAAa,CAACZ,KAAd,CAAoB,GAApB,CAAb;;AAEA,MAAI,CAACa,MAAL,EAAa;AACXA,IAAAA,MAAM,GAAG,CAAT;AACD;;AAED,SAAOJ,MAAM,CAACR,GAAP,CAAW,UAAUS,CAAV,EAAaP,CAAb,EAAgB;AAChC,QAAI,WAAWW,IAAX,CAAgBJ,CAAhB,CAAJ,EAAwB;AACtB,aAAOA,CAAP;AACD;;AAED,WAAOpB,OAAO,CAAC,8CAAD,EACZa,CAAC,GAAGU,MADQ,EAEZR,uBAAuB,CAACK,CAAD,CAFX,CAAd;AAGD,GARM,EAQJN,IARI,CAQC,GARD,CAAP;AASD,CAhBD","sourcesContent":["'use strict';\n\nvar sprintf = require('sprintf-js').sprintf;\n\n/**\n * @returns {String} the string with all zeroes contained in a <span>\n */\nvar spanAllZeroes = exports.spanAllZeroes = function (s) {\n  return s.replace(/(0+)/g, '<span class=\"zero\">$1</span>');\n};\n\n/**\n * @returns {String} the string with each character contained in a <span>\n */\nexports.spanAll = function (s, optionalOffset) {\n  if (optionalOffset === undefined) {\n    optionalOffset = 0;\n  }\n\n  var letters = s.split('');\n\n  return letters.map(function (n, i) {\n    return sprintf('<span class=\"digit value-%s position-%d\">%s</span>', n,\n      i + optionalOffset,\n      spanAllZeroes(n)); // XXX Use #base-2 .value-0 instead?\n  }).join('');\n};\n\nfunction spanLeadingZeroesSimple(group) {\n  return group.replace(/^(0+)/, '<span class=\"zero\">$1</span>');\n}\n\n/**\n * @returns {String} the string with leading zeroes contained in a <span>\n */\nexports.spanLeadingZeroes = function (address) {\n  var groups = address.split(':');\n\n  return groups.map(function (g) {\n    return spanLeadingZeroesSimple(g);\n  }).join(':');\n};\n\n/**\n * Groups an address\n * @returns {String} a grouped address\n */\nexports.simpleGroup = function (addressString, offset) {\n  var groups = addressString.split(':');\n\n  if (!offset) {\n    offset = 0;\n  }\n\n  return groups.map(function (g, i) {\n    if (/group-v4/.test(g)) {\n      return g;\n    }\n\n    return sprintf('<span class=\"hover-group group-%d\">%s</span>',\n      i + offset,\n      spanLeadingZeroesSimple(g));\n  }).join(':');\n};\n"]},"metadata":{},"sourceType":"script"}