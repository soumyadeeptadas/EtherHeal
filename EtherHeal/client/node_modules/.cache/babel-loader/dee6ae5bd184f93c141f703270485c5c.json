{"ast":null,"code":"'use strict'; // A wrapper function that returns false if the address is not valid; used to\n// avoid boilerplate checks for `if (!this.valid) { return false; }`\n\nvar falseIfInvalid = exports.falseIfInvalid = function (fn) {\n  return function () {\n    if (!this.valid) {\n      return false;\n    }\n\n    return fn.apply(this, arguments);\n  };\n};\n\nexports.isInSubnet = falseIfInvalid(function (address) {\n  if (this.subnetMask < address.subnetMask) {\n    return false;\n  }\n\n  if (this.mask(address.subnetMask) === address.mask()) {\n    return true;\n  }\n\n  return false;\n});\n\nexports.isCorrect = function (defaultBits) {\n  return falseIfInvalid(function () {\n    if (this.addressMinusSuffix !== this.correctForm()) {\n      return false;\n    }\n\n    if (this.subnetMask === defaultBits && !this.parsedSubnet) {\n      return true;\n    }\n\n    return this.parsedSubnet === String(this.subnetMask);\n  });\n};","map":{"version":3,"sources":["Z:/Projects/EtherealOrgan/Complete Project/client/node_modules/ip-address/lib/common.js"],"names":["falseIfInvalid","exports","fn","valid","apply","arguments","isInSubnet","address","subnetMask","mask","isCorrect","defaultBits","addressMinusSuffix","correctForm","parsedSubnet","String"],"mappings":"AAAA,a,CAEA;AACA;;AACA,IAAIA,cAAc,GAAGC,OAAO,CAACD,cAAR,GAAyB,UAAUE,EAAV,EAAc;AAC1D,SAAO,YAAY;AACjB,QAAI,CAAC,KAAKC,KAAV,EAAiB;AACf,aAAO,KAAP;AACD;;AAED,WAAOD,EAAE,CAACE,KAAH,CAAS,IAAT,EAAeC,SAAf,CAAP;AACD,GAND;AAOD,CARD;;AAUAJ,OAAO,CAACK,UAAR,GAAqBN,cAAc,CAAC,UAAUO,OAAV,EAAmB;AACrD,MAAI,KAAKC,UAAL,GAAkBD,OAAO,CAACC,UAA9B,EAA0C;AACxC,WAAO,KAAP;AACD;;AAED,MAAI,KAAKC,IAAL,CAAUF,OAAO,CAACC,UAAlB,MAAkCD,OAAO,CAACE,IAAR,EAAtC,EAAsD;AACpD,WAAO,IAAP;AACD;;AAED,SAAO,KAAP;AACD,CAVkC,CAAnC;;AAYAR,OAAO,CAACS,SAAR,GAAoB,UAAUC,WAAV,EAAuB;AACzC,SAAOX,cAAc,CAAC,YAAY;AAChC,QAAI,KAAKY,kBAAL,KAA4B,KAAKC,WAAL,EAAhC,EAAoD;AAClD,aAAO,KAAP;AACD;;AAED,QAAI,KAAKL,UAAL,KAAoBG,WAApB,IAAmC,CAAC,KAAKG,YAA7C,EAA2D;AACzD,aAAO,IAAP;AACD;;AAED,WAAO,KAAKA,YAAL,KAAsBC,MAAM,CAAC,KAAKP,UAAN,CAAnC;AACD,GAVoB,CAArB;AAWD,CAZD","sourcesContent":["'use strict';\n\n// A wrapper function that returns false if the address is not valid; used to\n// avoid boilerplate checks for `if (!this.valid) { return false; }`\nvar falseIfInvalid = exports.falseIfInvalid = function (fn) {\n  return function () {\n    if (!this.valid) {\n      return false;\n    }\n\n    return fn.apply(this, arguments);\n  };\n};\n\nexports.isInSubnet = falseIfInvalid(function (address) {\n  if (this.subnetMask < address.subnetMask) {\n    return false;\n  }\n\n  if (this.mask(address.subnetMask) === address.mask()) {\n    return true;\n  }\n\n  return false;\n});\n\nexports.isCorrect = function (defaultBits) {\n  return falseIfInvalid(function () {\n    if (this.addressMinusSuffix !== this.correctForm()) {\n      return false;\n    }\n\n    if (this.subnetMask === defaultBits && !this.parsedSubnet) {\n      return true;\n    }\n\n    return this.parsedSubnet === String(this.subnetMask);\n  });\n};\n"]},"metadata":{},"sourceType":"script"}