{"ast":null,"code":"'use strict';\n\nconst multihashing = require('multihashing-async');\n\nconst protobuf = require('protons');\n\nconst bs58 = require('bs58');\n\nconst crypto = require('./rsa');\n\nconst pbm = protobuf(require('./keys.proto'));\n\nconst forge = require('node-forge');\n\nconst setImmediate = require('async/setImmediate');\n\nclass RsaPublicKey {\n  constructor(key) {\n    this._key = key;\n  }\n\n  verify(data, sig, callback) {\n    ensure(callback);\n    crypto.hashAndVerify(this._key, sig, data, callback);\n  }\n\n  marshal() {\n    return crypto.utils.jwkToPkix(this._key);\n  }\n\n  get bytes() {\n    return pbm.PublicKey.encode({\n      Type: pbm.KeyType.RSA,\n      Data: this.marshal()\n    });\n  }\n\n  encrypt(bytes) {\n    return this._key.encrypt(bytes, 'RSAES-PKCS1-V1_5');\n  }\n\n  equals(key) {\n    return this.bytes.equals(key.bytes);\n  }\n\n  hash(callback) {\n    ensure(callback);\n    multihashing(this.bytes, 'sha2-256', callback);\n  }\n\n}\n\nclass RsaPrivateKey {\n  // key       - Object of the jwk format\n  // publicKey - Buffer of the spki format\n  constructor(key, publicKey) {\n    this._key = key;\n    this._publicKey = publicKey;\n  }\n\n  genSecret() {\n    return crypto.getRandomValues(new Uint8Array(16));\n  }\n\n  sign(message, callback) {\n    ensure(callback);\n    crypto.hashAndSign(this._key, message, callback);\n  }\n\n  get public() {\n    if (!this._publicKey) {\n      throw new Error('public key not provided');\n    }\n\n    return new RsaPublicKey(this._publicKey);\n  }\n\n  decrypt(msg, callback) {\n    crypto.decrypt(this._key, msg, callback);\n  }\n\n  marshal() {\n    return crypto.utils.jwkToPkcs1(this._key);\n  }\n\n  get bytes() {\n    return pbm.PrivateKey.encode({\n      Type: pbm.KeyType.RSA,\n      Data: this.marshal()\n    });\n  }\n\n  equals(key) {\n    return this.bytes.equals(key.bytes);\n  }\n\n  hash(callback) {\n    ensure(callback);\n    multihashing(this.bytes, 'sha2-256', callback);\n  }\n  /**\n   * Gets the ID of the key.\n   *\n   * The key id is the base58 encoding of the SHA-256 multihash of its public key.\n   * The public key is a protobuf encoding containing a type and the DER encoding\n   * of the PKCS SubjectPublicKeyInfo.\n   *\n   * @param {function(Error, id)} callback\n   * @returns {undefined}\n   */\n\n\n  id(callback) {\n    this.public.hash((err, hash) => {\n      if (err) {\n        return callback(err);\n      }\n\n      callback(null, bs58.encode(hash));\n    });\n  }\n  /**\n   * Exports the key into a password protected PEM format\n   *\n   * @param {string} [format] - Defaults to 'pkcs-8'.\n   * @param {string} password - The password to read the encrypted PEM\n   * @param {function(Error, KeyInfo)} callback\n   * @returns {undefined}\n   */\n\n\n  export(format, password, callback) {\n    if (typeof password === 'function') {\n      callback = password;\n      password = format;\n      format = 'pkcs-8';\n    }\n\n    ensure(callback);\n    setImmediate(() => {\n      let err = null;\n      let pem = null;\n\n      try {\n        const buffer = new forge.util.ByteBuffer(this.marshal());\n        const asn1 = forge.asn1.fromDer(buffer);\n        const privateKey = forge.pki.privateKeyFromAsn1(asn1);\n\n        if (format === 'pkcs-8') {\n          const options = {\n            algorithm: 'aes256',\n            count: 10000,\n            saltSize: 128 / 8,\n            prfAlgorithm: 'sha512'\n          };\n          pem = forge.pki.encryptRsaPrivateKey(privateKey, password, options);\n        } else {\n          err = new Error(`Unknown export format '${format}'`);\n        }\n      } catch (_err) {\n        err = _err;\n      }\n\n      callback(err, pem);\n    });\n  }\n\n}\n\nfunction unmarshalRsaPrivateKey(bytes, callback) {\n  const jwk = crypto.utils.pkcs1ToJwk(bytes);\n  crypto.unmarshalPrivateKey(jwk, (err, keys) => {\n    if (err) {\n      return callback(err);\n    }\n\n    callback(null, new RsaPrivateKey(keys.privateKey, keys.publicKey));\n  });\n}\n\nfunction unmarshalRsaPublicKey(bytes) {\n  const jwk = crypto.utils.pkixToJwk(bytes);\n  return new RsaPublicKey(jwk);\n}\n\nfunction fromJwk(jwk, callback) {\n  crypto.unmarshalPrivateKey(jwk, (err, keys) => {\n    if (err) {\n      return callback(err);\n    }\n\n    callback(null, new RsaPrivateKey(keys.privateKey, keys.publicKey));\n  });\n}\n\nfunction generateKeyPair(bits, callback) {\n  crypto.generateKey(bits, (err, keys) => {\n    if (err) {\n      return callback(err);\n    }\n\n    callback(null, new RsaPrivateKey(keys.privateKey, keys.publicKey));\n  });\n}\n\nfunction ensure(callback) {\n  if (typeof callback !== 'function') {\n    throw new Error('callback is required');\n  }\n}\n\nmodule.exports = {\n  RsaPublicKey,\n  RsaPrivateKey,\n  unmarshalRsaPublicKey,\n  unmarshalRsaPrivateKey,\n  generateKeyPair,\n  fromJwk\n};","map":{"version":3,"sources":["Z:/Projects/Organ-Donation-Transplant-Chain-master/Complete Project/client/node_modules/libp2p-crypto/src/keys/rsa-class.js"],"names":["multihashing","require","protobuf","bs58","crypto","pbm","forge","setImmediate","RsaPublicKey","constructor","key","_key","verify","data","sig","callback","ensure","hashAndVerify","marshal","utils","jwkToPkix","bytes","PublicKey","encode","Type","KeyType","RSA","Data","encrypt","equals","hash","RsaPrivateKey","publicKey","_publicKey","genSecret","getRandomValues","Uint8Array","sign","message","hashAndSign","public","Error","decrypt","msg","jwkToPkcs1","PrivateKey","id","err","export","format","password","pem","buffer","util","ByteBuffer","asn1","fromDer","privateKey","pki","privateKeyFromAsn1","options","algorithm","count","saltSize","prfAlgorithm","encryptRsaPrivateKey","_err","unmarshalRsaPrivateKey","jwk","pkcs1ToJwk","unmarshalPrivateKey","keys","unmarshalRsaPublicKey","pkixToJwk","fromJwk","generateKeyPair","bits","generateKey","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst multihashing = require('multihashing-async')\nconst protobuf = require('protons')\nconst bs58 = require('bs58')\n\nconst crypto = require('./rsa')\nconst pbm = protobuf(require('./keys.proto'))\nconst forge = require('node-forge')\nconst setImmediate = require('async/setImmediate')\n\nclass RsaPublicKey {\n  constructor (key) {\n    this._key = key\n  }\n\n  verify (data, sig, callback) {\n    ensure(callback)\n    crypto.hashAndVerify(this._key, sig, data, callback)\n  }\n\n  marshal () {\n    return crypto.utils.jwkToPkix(this._key)\n  }\n\n  get bytes () {\n    return pbm.PublicKey.encode({\n      Type: pbm.KeyType.RSA,\n      Data: this.marshal()\n    })\n  }\n\n  encrypt (bytes) {\n    return this._key.encrypt(bytes, 'RSAES-PKCS1-V1_5')\n  }\n\n  equals (key) {\n    return this.bytes.equals(key.bytes)\n  }\n\n  hash (callback) {\n    ensure(callback)\n    multihashing(this.bytes, 'sha2-256', callback)\n  }\n}\n\nclass RsaPrivateKey {\n  // key       - Object of the jwk format\n  // publicKey - Buffer of the spki format\n  constructor (key, publicKey) {\n    this._key = key\n    this._publicKey = publicKey\n  }\n\n  genSecret () {\n    return crypto.getRandomValues(new Uint8Array(16))\n  }\n\n  sign (message, callback) {\n    ensure(callback)\n    crypto.hashAndSign(this._key, message, callback)\n  }\n\n  get public () {\n    if (!this._publicKey) {\n      throw new Error('public key not provided')\n    }\n\n    return new RsaPublicKey(this._publicKey)\n  }\n\n  decrypt (msg, callback) {\n    crypto.decrypt(this._key, msg, callback)\n  }\n\n  marshal () {\n    return crypto.utils.jwkToPkcs1(this._key)\n  }\n\n  get bytes () {\n    return pbm.PrivateKey.encode({\n      Type: pbm.KeyType.RSA,\n      Data: this.marshal()\n    })\n  }\n\n  equals (key) {\n    return this.bytes.equals(key.bytes)\n  }\n\n  hash (callback) {\n    ensure(callback)\n    multihashing(this.bytes, 'sha2-256', callback)\n  }\n\n  /**\n   * Gets the ID of the key.\n   *\n   * The key id is the base58 encoding of the SHA-256 multihash of its public key.\n   * The public key is a protobuf encoding containing a type and the DER encoding\n   * of the PKCS SubjectPublicKeyInfo.\n   *\n   * @param {function(Error, id)} callback\n   * @returns {undefined}\n   */\n  id (callback) {\n    this.public.hash((err, hash) => {\n      if (err) {\n        return callback(err)\n      }\n      callback(null, bs58.encode(hash))\n    })\n  }\n\n  /**\n   * Exports the key into a password protected PEM format\n   *\n   * @param {string} [format] - Defaults to 'pkcs-8'.\n   * @param {string} password - The password to read the encrypted PEM\n   * @param {function(Error, KeyInfo)} callback\n   * @returns {undefined}\n   */\n  export (format, password, callback) {\n    if (typeof password === 'function') {\n      callback = password\n      password = format\n      format = 'pkcs-8'\n    }\n\n    ensure(callback)\n\n    setImmediate(() => {\n      let err = null\n      let pem = null\n      try {\n        const buffer = new forge.util.ByteBuffer(this.marshal())\n        const asn1 = forge.asn1.fromDer(buffer)\n        const privateKey = forge.pki.privateKeyFromAsn1(asn1)\n\n        if (format === 'pkcs-8') {\n          const options = {\n            algorithm: 'aes256',\n            count: 10000,\n            saltSize: 128 / 8,\n            prfAlgorithm: 'sha512'\n          }\n          pem = forge.pki.encryptRsaPrivateKey(privateKey, password, options)\n        } else {\n          err = new Error(`Unknown export format '${format}'`)\n        }\n      } catch (_err) {\n        err = _err\n      }\n\n      callback(err, pem)\n    })\n  }\n}\n\nfunction unmarshalRsaPrivateKey (bytes, callback) {\n  const jwk = crypto.utils.pkcs1ToJwk(bytes)\n\n  crypto.unmarshalPrivateKey(jwk, (err, keys) => {\n    if (err) {\n      return callback(err)\n    }\n\n    callback(null, new RsaPrivateKey(keys.privateKey, keys.publicKey))\n  })\n}\n\nfunction unmarshalRsaPublicKey (bytes) {\n  const jwk = crypto.utils.pkixToJwk(bytes)\n\n  return new RsaPublicKey(jwk)\n}\n\nfunction fromJwk (jwk, callback) {\n  crypto.unmarshalPrivateKey(jwk, (err, keys) => {\n    if (err) {\n      return callback(err)\n    }\n\n    callback(null, new RsaPrivateKey(keys.privateKey, keys.publicKey))\n  })\n}\n\nfunction generateKeyPair (bits, callback) {\n  crypto.generateKey(bits, (err, keys) => {\n    if (err) {\n      return callback(err)\n    }\n\n    callback(null, new RsaPrivateKey(keys.privateKey, keys.publicKey))\n  })\n}\n\nfunction ensure (callback) {\n  if (typeof callback !== 'function') {\n    throw new Error('callback is required')\n  }\n}\n\nmodule.exports = {\n  RsaPublicKey,\n  RsaPrivateKey,\n  unmarshalRsaPublicKey,\n  unmarshalRsaPrivateKey,\n  generateKeyPair,\n  fromJwk\n}\n"]},"metadata":{},"sourceType":"script"}