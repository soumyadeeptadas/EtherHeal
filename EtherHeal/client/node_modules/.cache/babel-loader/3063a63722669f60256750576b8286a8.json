{"ast":null,"code":"'use strict';\n\nconst promisify = require('promisify-es6');\n\nconst dagPB = require('ipld-dag-pb');\n\nconst DAGLink = dagPB.DAGLink;\n\nconst cleanMultihash = require('../utils/clean-multihash');\n\nconst bs58 = require('bs58');\n\nconst LRU = require('lru-cache');\n\nconst lruOptions = {\n  max: 128\n};\nconst cache = LRU(lruOptions);\n\nmodule.exports = send => {\n  return promisify((multihash, options, callback) => {\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    if (!options) {\n      options = {};\n    }\n\n    try {\n      multihash = cleanMultihash(multihash, options);\n    } catch (err) {\n      return callback(err);\n    }\n\n    const node = cache.get(multihash);\n\n    if (node) {\n      return callback(null, node.links);\n    }\n\n    send({\n      path: 'object/links',\n      args: multihash\n    }, (err, result) => {\n      if (err) {\n        return callback(err);\n      }\n\n      let links = [];\n\n      if (result.Links) {\n        links = result.Links.map(l => {\n          return new DAGLink(l.Name, l.Size, Buffer.from(bs58.decode(l.Hash)));\n        });\n      }\n\n      callback(null, links);\n    });\n  });\n};","map":{"version":3,"sources":["Z:/Projects/Organ-Donation-Transplant-Chain-master/Complete Project/client/node_modules/ipfs-api/src/object/links.js"],"names":["promisify","require","dagPB","DAGLink","cleanMultihash","bs58","LRU","lruOptions","max","cache","module","exports","send","multihash","options","callback","err","node","get","links","path","args","result","Links","map","l","Name","Size","Buffer","from","decode","Hash"],"mappings":"AAAA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,eAAD,CAAzB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,aAAD,CAArB;;AACA,MAAME,OAAO,GAAGD,KAAK,CAACC,OAAtB;;AACA,MAAMC,cAAc,GAAGH,OAAO,CAAC,0BAAD,CAA9B;;AACA,MAAMI,IAAI,GAAGJ,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMK,GAAG,GAAGL,OAAO,CAAC,WAAD,CAAnB;;AACA,MAAMM,UAAU,GAAG;AACjBC,EAAAA,GAAG,EAAE;AADY,CAAnB;AAIA,MAAMC,KAAK,GAAGH,GAAG,CAACC,UAAD,CAAjB;;AAEAG,MAAM,CAACC,OAAP,GAAkBC,IAAD,IAAU;AACzB,SAAOZ,SAAS,CAAC,CAACa,SAAD,EAAYC,OAAZ,EAAqBC,QAArB,KAAkC;AACjD,QAAI,OAAOD,OAAP,KAAmB,UAAvB,EAAmC;AACjCC,MAAAA,QAAQ,GAAGD,OAAX;AACAA,MAAAA,OAAO,GAAG,EAAV;AACD;;AACD,QAAI,CAACA,OAAL,EAAc;AACZA,MAAAA,OAAO,GAAG,EAAV;AACD;;AAED,QAAI;AACFD,MAAAA,SAAS,GAAGT,cAAc,CAACS,SAAD,EAAYC,OAAZ,CAA1B;AACD,KAFD,CAEE,OAAOE,GAAP,EAAY;AACZ,aAAOD,QAAQ,CAACC,GAAD,CAAf;AACD;;AAED,UAAMC,IAAI,GAAGR,KAAK,CAACS,GAAN,CAAUL,SAAV,CAAb;;AAEA,QAAII,IAAJ,EAAU;AACR,aAAOF,QAAQ,CAAC,IAAD,EAAOE,IAAI,CAACE,KAAZ,CAAf;AACD;;AAEDP,IAAAA,IAAI,CAAC;AACHQ,MAAAA,IAAI,EAAE,cADH;AAEHC,MAAAA,IAAI,EAAER;AAFH,KAAD,EAGD,CAACG,GAAD,EAAMM,MAAN,KAAiB;AAClB,UAAIN,GAAJ,EAAS;AACP,eAAOD,QAAQ,CAACC,GAAD,CAAf;AACD;;AAED,UAAIG,KAAK,GAAG,EAAZ;;AAEA,UAAIG,MAAM,CAACC,KAAX,EAAkB;AAChBJ,QAAAA,KAAK,GAAGG,MAAM,CAACC,KAAP,CAAaC,GAAb,CAAkBC,CAAD,IAAO;AAC9B,iBAAO,IAAItB,OAAJ,CAAYsB,CAAC,CAACC,IAAd,EAAoBD,CAAC,CAACE,IAAtB,EAA4BC,MAAM,CAACC,IAAP,CAAYxB,IAAI,CAACyB,MAAL,CAAYL,CAAC,CAACM,IAAd,CAAZ,CAA5B,CAAP;AACD,SAFO,CAAR;AAGD;;AACDhB,MAAAA,QAAQ,CAAC,IAAD,EAAOI,KAAP,CAAR;AACD,KAhBG,CAAJ;AAiBD,GAtCe,CAAhB;AAuCD,CAxCD","sourcesContent":["'use strict'\n\nconst promisify = require('promisify-es6')\nconst dagPB = require('ipld-dag-pb')\nconst DAGLink = dagPB.DAGLink\nconst cleanMultihash = require('../utils/clean-multihash')\nconst bs58 = require('bs58')\nconst LRU = require('lru-cache')\nconst lruOptions = {\n  max: 128\n}\n\nconst cache = LRU(lruOptions)\n\nmodule.exports = (send) => {\n  return promisify((multihash, options, callback) => {\n    if (typeof options === 'function') {\n      callback = options\n      options = {}\n    }\n    if (!options) {\n      options = {}\n    }\n\n    try {\n      multihash = cleanMultihash(multihash, options)\n    } catch (err) {\n      return callback(err)\n    }\n\n    const node = cache.get(multihash)\n\n    if (node) {\n      return callback(null, node.links)\n    }\n\n    send({\n      path: 'object/links',\n      args: multihash\n    }, (err, result) => {\n      if (err) {\n        return callback(err)\n      }\n\n      let links = []\n\n      if (result.Links) {\n        links = result.Links.map((l) => {\n          return new DAGLink(l.Name, l.Size, Buffer.from(bs58.decode(l.Hash)))\n        })\n      }\n      callback(null, links)\n    })\n  })\n}\n"]},"metadata":{},"sourceType":"script"}