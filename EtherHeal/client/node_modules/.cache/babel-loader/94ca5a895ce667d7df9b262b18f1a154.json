{"ast":null,"code":"'use strict';\n\nconst cleanCID = require('../utils/clean-cid');\n\nconst TarStreamToObjects = require('../utils/tar-stream-to-objects');\n\nconst v = require('is-ipfs');\n\nconst through = require('through2');\n\nconst pull = require('pull-stream');\n\nconst toPull = require('stream-to-pull-stream');\n\nconst deferred = require('pull-defer');\n\nmodule.exports = send => {\n  return (path, opts) => {\n    opts = opts || {};\n    const p = deferred.source();\n\n    try {\n      path = cleanCID(path);\n    } catch (err) {\n      if (!v.ipfsPath(path)) {\n        return p.end(err);\n      }\n    }\n\n    const request = {\n      path: 'get',\n      args: path,\n      qs: opts\n    }; // Convert the response stream to TarStream objects\n\n    send.andTransform(request, TarStreamToObjects, (err, stream) => {\n      if (err) {\n        return p.end(err);\n      }\n\n      const files = [];\n      stream.pipe(through.obj((file, enc, next) => {\n        if (file.content) {\n          files.push({\n            path: file.path,\n            content: toPull(file.content)\n          });\n        } else {\n          files.push(file);\n        }\n\n        next();\n      }, () => p.resolve(pull.values(files))));\n    });\n    return p;\n  };\n};","map":{"version":3,"sources":["z:/Projects/EtherealOrgan-Halo/Complete Project/client/node_modules/ipfs-api/src/files/get-pull-stream.js"],"names":["cleanCID","require","TarStreamToObjects","v","through","pull","toPull","deferred","module","exports","send","path","opts","p","source","err","ipfsPath","end","request","args","qs","andTransform","stream","files","pipe","obj","file","enc","next","content","push","resolve","values"],"mappings":"AAAA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,oBAAD,CAAxB;;AACA,MAAMC,kBAAkB,GAAGD,OAAO,CAAC,gCAAD,CAAlC;;AACA,MAAME,CAAC,GAAGF,OAAO,CAAC,SAAD,CAAjB;;AACA,MAAMG,OAAO,GAAGH,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAMI,IAAI,GAAGJ,OAAO,CAAC,aAAD,CAApB;;AACA,MAAMK,MAAM,GAAGL,OAAO,CAAC,uBAAD,CAAtB;;AACA,MAAMM,QAAQ,GAAGN,OAAO,CAAC,YAAD,CAAxB;;AAEAO,MAAM,CAACC,OAAP,GAAkBC,IAAD,IAAU;AACzB,SAAO,CAACC,IAAD,EAAOC,IAAP,KAAgB;AACrBA,IAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf;AAEA,UAAMC,CAAC,GAAGN,QAAQ,CAACO,MAAT,EAAV;;AAEA,QAAI;AACFH,MAAAA,IAAI,GAAGX,QAAQ,CAACW,IAAD,CAAf;AACD,KAFD,CAEE,OAAOI,GAAP,EAAY;AACZ,UAAI,CAACZ,CAAC,CAACa,QAAF,CAAWL,IAAX,CAAL,EAAuB;AACrB,eAAOE,CAAC,CAACI,GAAF,CAAMF,GAAN,CAAP;AACD;AACF;;AAED,UAAMG,OAAO,GAAG;AAAEP,MAAAA,IAAI,EAAE,KAAR;AAAeQ,MAAAA,IAAI,EAAER,IAArB;AAA2BS,MAAAA,EAAE,EAAER;AAA/B,KAAhB,CAbqB,CAerB;;AACAF,IAAAA,IAAI,CAACW,YAAL,CAAkBH,OAAlB,EAA2BhB,kBAA3B,EAA+C,CAACa,GAAD,EAAMO,MAAN,KAAiB;AAC9D,UAAIP,GAAJ,EAAS;AAAE,eAAOF,CAAC,CAACI,GAAF,CAAMF,GAAN,CAAP;AAAmB;;AAE9B,YAAMQ,KAAK,GAAG,EAAd;AACAD,MAAAA,MAAM,CAACE,IAAP,CAAYpB,OAAO,CAACqB,GAAR,CAAY,CAACC,IAAD,EAAOC,GAAP,EAAYC,IAAZ,KAAqB;AAC3C,YAAIF,IAAI,CAACG,OAAT,EAAkB;AAChBN,UAAAA,KAAK,CAACO,IAAN,CAAW;AAAEnB,YAAAA,IAAI,EAAEe,IAAI,CAACf,IAAb;AAAmBkB,YAAAA,OAAO,EAAEvB,MAAM,CAACoB,IAAI,CAACG,OAAN;AAAlC,WAAX;AACD,SAFD,MAEO;AACLN,UAAAA,KAAK,CAACO,IAAN,CAAWJ,IAAX;AACD;;AACDE,QAAAA,IAAI;AACL,OAPW,EAOT,MAAMf,CAAC,CAACkB,OAAF,CAAU1B,IAAI,CAAC2B,MAAL,CAAYT,KAAZ,CAAV,CAPG,CAAZ;AAQD,KAZD;AAcA,WAAOV,CAAP;AACD,GA/BD;AAgCD,CAjCD","sourcesContent":["'use strict'\n\nconst cleanCID = require('../utils/clean-cid')\nconst TarStreamToObjects = require('../utils/tar-stream-to-objects')\nconst v = require('is-ipfs')\nconst through = require('through2')\nconst pull = require('pull-stream')\nconst toPull = require('stream-to-pull-stream')\nconst deferred = require('pull-defer')\n\nmodule.exports = (send) => {\n  return (path, opts) => {\n    opts = opts || {}\n\n    const p = deferred.source()\n\n    try {\n      path = cleanCID(path)\n    } catch (err) {\n      if (!v.ipfsPath(path)) {\n        return p.end(err)\n      }\n    }\n\n    const request = { path: 'get', args: path, qs: opts }\n\n    // Convert the response stream to TarStream objects\n    send.andTransform(request, TarStreamToObjects, (err, stream) => {\n      if (err) { return p.end(err) }\n\n      const files = []\n      stream.pipe(through.obj((file, enc, next) => {\n        if (file.content) {\n          files.push({ path: file.path, content: toPull(file.content) })\n        } else {\n          files.push(file)\n        }\n        next()\n      }, () => p.resolve(pull.values(files))))\n    })\n\n    return p\n  }\n}\n"]},"metadata":{},"sourceType":"script"}